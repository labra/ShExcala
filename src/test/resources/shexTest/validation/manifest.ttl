# -*- mode: n3; outline-regexp: "[#]+ "; -*-

# prefixes
@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix sht:     <http://www.w3.org/ns/shacl/test-suite#> .
@prefix prov:   <http://www.w3.org/ns/prov#> .

 # TODO:
 #   repeated OR
 #   1dotRefOr3 on..


# entries
<> a mf:Manifest ;
    rdfs:comment "ShEx validation tests" ;
    mf:entries
    (
## empty
        <#0_empty>
        <#0_other>

## triple pattern
        <#1dot_fail-empty>
        <#1dot_fail-missing>
        <#1dot_pass-noOthers> <#1dotComma_pass-noOthers> <#1dotLNex_pass-noOthers> <#1dotNS2_pass-noOthers> <#1dotNS2Comment_pass-noOthers> <#1dotLNexComment_pass-noOthers> <#1dotLNdefault_pass-noOthers> <#1dotNSdefault_pass-noOthers> <#1dotLNex-HYPHEN_MINUS_pass-noOthers>
        <#1dot_pass-others_lexicallyEarlier>
        <#1dot_pass-others_lexicallyLater>
        <#bnode1dot_fail-missing>
        <#bnode1dot_pass-others_lexicallyEarlier>
        <#1inversedot_fail-empty>
        <#1inversedot_fail-missing>
        <#1inversedot_pass-noOthers>
        <#1inversedot_pass-over_lexicallyEarlier>
        <#1inversedot_pass-over_lexicallyLater>
        <#1negateddot_pass-empty>
        <#1negateddot_pass-missing>
        <#1negateddot_fail-noOthers>
        <#1negateddot_fail-others_lexicallyEarlier>
        <#1negateddot_fail-others_lexicallyLater>
        <#1negatedinversedot_pass-empty>
        <#1negatedinversedot_pass-missing>
        <#1negatedinversedot_fail-noOthers>
        <#1negatedinversedot_fail-others_lexicallyEarlier>
        <#1negatedinversedot_fail-others_lexicallyLater>
        # 1inversenegateddot_... same as 1negatedinversedot
        <#1Adot_pass>

## node kinds
        <#1iri_pass-iri>
        <#1iri_fail-bnode>
        <#1iri_fail-literal>
        <#1bnode_fail-iri>
        <#1bnode_pass-bnode>
        <#1bnode_fail-literal>
        <#1literal_fail-iri>
        <#1literal_fail-bnode>
        <#1literal_pass-literal>
        <#1nonliteral_pass-iri>
        <#1nonliteral_pass-bnode>
        <#1nonliteral_fail-literal>

## datatype
        <#1datatype_missing>
        <#1datatype_nonLiteral>
        <#1datatype_wrongDatatype>
        <#1datatype_pass>

## cardinality
###   dot cardinality
        <#1card2_fail0>
        <#1card2_fail1>
        <#1card2_pass2>
        <#1card2_fail3>
        <#1card25_fail0>
        <#1card25_fail1>
        <#1card25_pass2>
        <#1card25_pass3>
        <#1card25_pass4>
        <#1card25_pass5>
        <#1card25_fail6>
        <#1card2Star_fail0>
        <#1card2Star_fail1>
        <#1card2Star_pass2>
        <#1card2Star_pass3>
        <#1card2Star_pass6>
        # 1card2blank_... same as 1card2Star
        <#1cardOpt_pass0>
        <#1cardOpt_pass1>
        <#1cardOpt_fail2>
        <#1cardOpt_pass6>
        <#1cardPlus_fail0>
        <#1cardPlus_pass1>
        <#1cardPlus_pass2>
        <#1cardPlus_pass6>
        <#1cardStar_pass0>
        <#1cardStar_pass1>
        <#1cardStar_pass2>
        <#1cardStar_pass6>

###   non-dot cardinality
        <#1literalPlus_Is1_Ip1_La,Io1>

## shape reference
        <#1dotRef1_referent,referrer>
        <#1dotRef1_referrer,referent>
        <#1dotRef1_missingReferent>
        <#1dotRef1_overReferrer>
        <#1dotRef1_overReferrer,overReferent>
        <#1dotRef1_overMatchesReferent>
	<#1refbnode1_pass>
	<#1refbnode1_fail-g1-arc>
	<#1refbnode1_fail-g2-arc>
	<#3circularRef1_pass-open>
	<#3circularRef1_pass-closed>
	<#1iriRef1_pass-iri>
	<#1iriRef1_fail-bnode>
	<#1bnodeRef1_fail-iri>
	<#1bnodeRef1_pass-bnode>
	<#1dotRef1_selfReference>
	<#1dotRef1_missingSelfReference>

## inline
	<#1dotInline1_referrer,referent>
	<#1dotInline1_missingReferent>
	<#1dotInline1_selfReference>
	<#1dotInline1_missingSelfReference>
	<#1dotInline1_overReferrer>
	<#1dotInline1_overReferrer,overReferent>
	<#1dotInline1_overMatchesReferent>

## term equivalence
###   iri equivalence
        <#1val1IRIREF_pass>             # <S> { <p1> [<v1>] }
        <#1val1IRIREF_v2>
        <#1val1IRIREF_v1v2>

###   literal equivalence
####     numeric equivalence
        <#1val1INTEGER_pass>            # <S> { <p1> [0] }
        <#1val1INTEGER_00>
        <#1val1INTEGER_Lab>
        <#1val1DOUBLE_pass>             # <S> { <p1> [0e0] }
        <#1val1DOUBLE_passUC>
        <#1val1DOUBLE_0_0e0>
        # 1val1DOUBLElowercase_... same as 1val1DOUBLE
        # @@ eliminate as duplicate?
        <#1val1DOUBLElowercase_pass>    # <S> { <p1> [0e0] }
        <#1val1DOUBLElowercase_passUC>
        <#1val1DOUBLElowercase_0_0e0>

####     language tag equivalence
        <#1val1LANGTAG_pass>            # <S> { <p1> ['ab'@en-fr] }
        <#1val1LANGTAG_Lab>
        <#1val1LANGTAG_LabLTen>
        <#1val1LANGTAG_LabLTen-fr-jura>
        <#1val1LANGTAG_LaLTen-fr>

####     datatyped literal equivalence
        <#1val1IRIREFDatatype_pass>    # <S> { <p1> ['ab'^^my:bloodType] }
        <#1val1IRIREFDatatype_Lab>
        <#1val1IRIREFDatatype_LabDTbloodType999>
        <#1val1IRIREFDatatype_LaDTbloodType>
        # 1val1LNDatatype_... same as 1val1IRIREFDatatype except prefixes

####     boolean equivalence
        <#1val1true_pass>               # <S> { <p1> [true] }
        <#1val1true_false>
        <#1val1true_ab>
        <#1val1false_pass>              # <S> { <p1> [false] }
        <#1val1false_true>
        <#1val1false_ab>

## facets
###   length
        <#1datatypeLength_fail-missing>
        <#1datatypeLength_fail-wrongDatatype>
        <#1datatypeLength_fail-short>
        <#1datatypeLength_pass>
        <#1datatypeLength_fail-long>
###   fractionDigits
        <#1literalFractiondigits_fail-decimal-short>
        # <#1literalFractiondigitsxsd-integer_fail-decimal-short> # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
        <#1literalFractiondigits_pass-decimal-equal>
        #  <#1literalFractiondigitsxsd-integer_pass-decimal-equal> # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
        <#1literalFractiondigits_pass-float-equal>
        <#1literalFractiondigits_fail-decimal-long>
        <#1literalFractiondigits_fail-integer-short>
        <#1literalFractiondigits_fail-xsd_integer-short>
        <#1literalFractiondigits_fail-malformedxsd_decimal-1_23ab>
        <#1literalFractiondigits_fail-malformedxsd_decimal-1_2345ab>
        <#1literalFractiondigits_fail-malformedxsd_integer-1_2345>
        <#1literalFractiondigits_fail-iri>
        <#1literalFractiondigits_fail-bnode>
###   totalDigits
        <#1literalTotaldigits_fail-decimal-short>
        # <#1literalTotaldigitsxsd-integer_fail-decimal-short> # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
        <#1literalTotaldigits_pass-decimal-equal>
        #  <#1literalTotaldigitsxsd-integer_pass-decimal-equal> # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
        <#1literalTotaldigits_pass-float-equal>
        <#1literalTotaldigits_fail-decimal-long>
        <#1literalTotaldigits_pass-integer-equal>
        <#1literalTotaldigits_fail-xsd_integer-short>
        <#1literalTotaldigits_fail-malformedxsd_decimal-1_23ab>
        <#1literalTotaldigits_fail-malformedxsd_decimal-1_2345ab>
        <#1literalTotaldigits_fail-malformedxsd_integer-1_2345>
        <#1literalTotaldigits_fail-iri>
        <#1literalTotaldigits_fail-bnode>
###   comparators
####     manual
        <#1floatMininclusiveINTEGER_fail-low>
        <#1floatMininclusiveINTEGER_pass-equalLead>
        <#1floatMininclusiveINTEGER_pass-equalTrail>
        <#1floatMininclusiveINTEGER_pass-high>
        <#1integerMininclusiveINTEGER_fail-low>
        <#1integerMininclusiveINTEGER_pass-equal>
        <#1integerMininclusiveINTEGER_pass-equalLead>
        <#1integerMininclusiveINTEGER_pass-high>
        <#1floatMininclusiveINTEGERLead_pass-equal>
####     generated
        <#1integerMininclusiveINTEGER_fail-integer-low>
        <#1integerMininclusiveINTEGER_pass-integer-equal>
        <#1integerMininclusiveINTEGER_pass-integer-high>
        <#1integerMininclusiveINTEGERLead_fail-integer-low>
        <#1integerMininclusiveINTEGERLead_pass-integer-equal>
        <#1integerMininclusiveINTEGERLead_pass-integer-equalLead>
        <#1integerMininclusiveINTEGERLead_pass-integer-high>
        <#1integerMininclusiveDECIMAL_pass-integer-equal>
        <#1integerMininclusiveDECIMALLeadTrail_fail-integer-low>
        <#1integerMininclusiveDECIMALLeadTrail_pass-integer-equal>
        <#1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead>
        <#1integerMininclusiveDECIMALLeadTrail_pass-integer-high>
        <#1integerMininclusiveDECIMALint_fail-integer-low>
        <#1integerMininclusiveDECIMALint_pass-integer-equal>
        <#1integerMininclusiveDECIMALint_pass-integer-high>
        <#1integerMininclusiveDECIMALintLeadTrail_fail-integer-low>
        <#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal>
        <#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead>
        <#1integerMininclusiveDECIMALintLeadTrail_pass-integer-high>
        <#1integerMininclusiveDOUBLE_pass-integer-equal>
        <#1integerMininclusiveDOUBLELeadTrail_fail-integer-low>
        <#1integerMininclusiveDOUBLELeadTrail_pass-integer-equal>
        <#1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead>
        <#1integerMininclusiveDOUBLELeadTrail_pass-integer-high>
        <#1integerMininclusiveDOUBLEint_pass-integer-equal>
        <#1integerMininclusiveDOUBLEintLeadTrail_fail-integer-low>
        <#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal>
        <#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead>
        <#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high>
        <#1integerMininclusiveINTEGER_fail-decimal-equal>
        <#1integerMininclusiveINTEGER_fail-float-equal>
        <#1integerMininclusiveINTEGER_fail-double-equal>
        <#1integerMininclusiveINTEGER_fail-dateTime-equal>
        <#1integerMininclusiveINTEGER_fail-string-equal>
        <#1integerMininclusiveINTEGER_fail-byte-equal>
        <#1integerMininclusivexsd-integer_fail-integer-low>
        <#1integerMininclusivexsd-integer_pass-integer-equal>
        <#1decimalMininclusiveINTEGER_fail-decimal-low>
        <#1decimalMininclusiveINTEGER_pass-decimal-high>
        <#1decimalMininclusiveINTEGERLead_fail-decimal-low>
        <#1decimalMininclusiveINTEGERLead_pass-decimal-high>
        <#1decimalMininclusiveDECIMAL_fail-decimal-low>
        <#1decimalMininclusiveDECIMAL_pass-decimal-equal>
        <#1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail>
        <#1decimalMininclusiveDECIMAL_pass-decimal-high>
        <#1decimalMininclusiveDECIMALLeadTrail_fail-decimal-low>
        <#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal>
        <#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail>
        <#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high>
        <#1decimalMininclusiveDECIMALintLeadTrail_fail-decimal-low>
        <#1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high>
        <#1decimalMininclusiveDOUBLE_fail-decimal-low>
        <#1decimalMininclusiveDOUBLE_pass-decimal-equal>
        <#1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail>
        <#1decimalMininclusiveDOUBLELeadTrail_fail-decimal-low>
        <#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal>
        <#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail>
        <#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high>
        <#1decimalMininclusiveDOUBLEintLeadTrail_fail-decimal-low>
        <#1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high>
        <#1decimalMininclusiveDECIMAL_fail-float-equal>
        <#1decimalMininclusiveDECIMAL_fail-double-equal>
        <#1decimalMininclusivexsd-decimal_fail-decimal-low>
        <#1decimalMininclusivexsd-decimal_pass-decimal-equal>
        <#1floatMininclusiveINTEGERLead_fail-float-low>
        <#1floatMininclusiveINTEGERLead_pass-float-high>
        <#1floatMininclusiveDECIMAL_pass-float-equal>
        <#1floatMininclusiveDECIMAL_pass-float-equalLeadTrail>
        <#1floatMininclusiveDECIMALLeadTrail_fail-float-low>
        <#1floatMininclusiveDECIMALLeadTrail_pass-float-equal>
        <#1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail>
        <#1floatMininclusiveDECIMALLeadTrail_pass-float-high>
        <#1floatMininclusiveDECIMALintLeadTrail_fail-float-low>
        <#1floatMininclusiveDECIMALintLeadTrail_pass-float-high>
        <#1floatMininclusiveDOUBLE_pass-float-equal>
        <#1floatMininclusiveDOUBLE_pass-float-equalLeadTrail>
        <#1floatMininclusiveDOUBLELeadTrail_fail-float-low>
        <#1floatMininclusiveDOUBLELeadTrail_pass-float-equal>
        <#1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail>
        <#1floatMininclusiveDOUBLELeadTrail_pass-float-high>
        <#1floatMininclusiveDOUBLEintLeadTrail_fail-float-low>
        <#1floatMininclusiveDOUBLEintLeadTrail_pass-float-high>
        <#1floatMininclusivexsd-float_fail-float-low>
        <#1floatMininclusivexsd-float_pass-float-equal>
        <#1doubleMininclusiveINTEGERLead_fail-double-low>
        <#1doubleMininclusiveINTEGERLead_pass-double-high>
        <#1doubleMininclusiveDECIMAL_pass-double-equal>
        <#1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail>
        <#1doubleMininclusiveDECIMALLeadTrail_fail-double-low>
        <#1doubleMininclusiveDECIMALLeadTrail_pass-double-equal>
        <#1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail>
        <#1doubleMininclusiveDECIMALLeadTrail_pass-double-high>
        <#1doubleMininclusiveDECIMALintLeadTrail_fail-double-low>
        <#1doubleMininclusiveDECIMALintLeadTrail_pass-double-high>
        <#1doubleMininclusiveDOUBLE_pass-double-equal>
        <#1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail>
        <#1doubleMininclusiveDOUBLELeadTrail_fail-double-low>
        <#1doubleMininclusiveDOUBLELeadTrail_pass-double-equal>
        <#1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail>
        <#1doubleMininclusiveDOUBLELeadTrail_pass-double-high>
        <#1doubleMininclusiveDOUBLEintLeadTrail_fail-double-low>
        <#1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high>
        <#1doubleMininclusivexsd-double_fail-double-low>
        <#1doubleMininclusivexsd-double_pass-double-equal>
        <#1integerMinexclusiveINTEGER_fail-integer-low>
        <#1integerMinexclusiveINTEGER_fail-integer-equal>
        <#1integerMinexclusiveINTEGER_pass-integer-high>
        <#1integerMinexclusiveDECIMALint_fail-integer-low>
        <#1integerMinexclusiveDECIMALint_fail-integer-equal>
        <#1integerMinexclusiveDECIMALint_pass-integer-high>
        <#1integerMinexclusiveDOUBLEint_fail-integer-low>
        <#1integerMinexclusiveDOUBLEint_fail-integer-equal>
        <#1integerMinexclusiveDOUBLEint_pass-integer-high>
        <#1decimalMinexclusiveINTEGER_fail-decimal-low>
        <#1decimalMinexclusiveINTEGER_pass-decimal-high>
        <#1decimalMinexclusiveDECIMAL_fail-decimal-low>
        <#1decimalMinexclusiveDECIMAL_fail-decimal-equal>
        <#1decimalMinexclusiveDECIMAL_pass-decimal-high>
        <#1decimalMinexclusiveDOUBLE_fail-decimal-low>
        <#1decimalMinexclusiveDOUBLE_fail-decimal-equal>
        <#1decimalMinexclusiveDOUBLE_pass-decimal-high>
        <#1decimalMinexclusiveDECIMAL_fail-float-equal>
        <#1decimalMinexclusiveDECIMAL_fail-double-equal>
        <#1floatMinexclusiveINTEGER_fail-float-low>
        <#1floatMinexclusiveINTEGER_pass-float-high>
        <#1floatMinexclusiveDECIMAL_fail-float-low>
        <#1floatMinexclusiveDECIMAL_fail-float-equal>
        <#1floatMinexclusiveDECIMAL_pass-float-high>
        <#1floatMinexclusiveDOUBLE_fail-float-low>
        <#1floatMinexclusiveDOUBLE_fail-float-equal>
        <#1floatMinexclusiveDOUBLE_pass-float-high>
        <#1floatMinexclusivexsd-float_fail-decimal-equal>
        <#1floatMinexclusivexsd-float_fail-double-equal>
        <#1doubleMinexclusiveINTEGER_fail-double-low>
        <#1doubleMinexclusiveINTEGER_pass-double-high>
        <#1doubleMinexclusiveDECIMAL_fail-double-low>
        <#1doubleMinexclusiveDECIMAL_fail-double-equal>
        <#1doubleMinexclusiveDECIMAL_pass-double-high>
        <#1doubleMinexclusiveDOUBLE_fail-double-low>
        <#1doubleMinexclusiveDOUBLE_fail-double-equal>
        <#1doubleMinexclusiveDOUBLE_pass-double-high>
        <#1doubleMinexclusiveDECIMAL_fail-float-equal>
        <#1integerMaxinclusiveINTEGER_pass-integer-low>
        <#1integerMaxinclusiveINTEGER_pass-integer-equal>
        <#1integerMaxinclusiveINTEGER_fail-integer-high>
        <#1integerMaxinclusiveDECIMALint_pass-integer-low>
        <#1integerMaxinclusiveDECIMALint_pass-integer-equal>
        <#1integerMaxinclusiveDECIMALint_fail-integer-high>
        <#1integerMaxinclusiveDOUBLEint_pass-integer-low>
        <#1integerMaxinclusiveDOUBLEint_pass-integer-equal>
        <#1integerMaxinclusiveDOUBLEint_fail-integer-high>
        <#1decimalMaxinclusiveINTEGER_pass-decimal-low>
        <#1decimalMaxinclusiveINTEGER_fail-decimal-high>
        <#1decimalMaxinclusiveDECIMAL_pass-decimal-low>
        <#1decimalMaxinclusiveDECIMAL_pass-decimal-equal>
        <#1decimalMaxinclusiveDECIMAL_fail-decimal-high>
        <#1decimalMaxinclusiveDOUBLE_pass-decimal-low>
        <#1decimalMaxinclusiveDOUBLE_pass-decimal-equal>
        <#1decimalMaxinclusiveDOUBLE_fail-decimal-high>
        <#1decimalMaxinclusiveDECIMAL_fail-float-equal>
        <#1decimalMaxinclusiveDECIMAL_fail-double-equal>
        <#1floatMaxinclusiveINTEGER_pass-float-low>
        <#1floatMaxinclusiveINTEGER_fail-float-high>
        <#1floatMaxinclusiveDECIMAL_pass-float-low>
        <#1floatMaxinclusiveDECIMAL_pass-float-equal>
        <#1floatMaxinclusiveDECIMAL_fail-float-high>
        <#1floatMaxinclusiveDOUBLE_pass-float-low>
        <#1floatMaxinclusiveDOUBLE_pass-float-equal>
        <#1floatMaxinclusiveDOUBLE_fail-float-high>
        <#1floatMaxinclusivexsd-float_fail-decimal-equal>
        <#1floatMaxinclusivexsd-float_fail-double-equal>
        <#1doubleMaxinclusiveINTEGER_pass-double-low>
        <#1doubleMaxinclusiveINTEGER_fail-double-high>
        <#1doubleMaxinclusiveDECIMAL_pass-double-low>
        <#1doubleMaxinclusiveDECIMAL_pass-double-equal>
        <#1doubleMaxinclusiveDECIMAL_fail-double-high>
        <#1doubleMaxinclusiveDOUBLE_pass-double-low>
        <#1doubleMaxinclusiveDOUBLE_pass-double-equal>
        <#1doubleMaxinclusiveDOUBLE_fail-double-high>
        <#1doubleMaxinclusiveDECIMAL_fail-float-equal>
        <#1integerMaxexclusiveINTEGER_pass-integer-low>
        <#1integerMaxexclusiveINTEGER_fail-integer-equal>
        <#1integerMaxexclusiveINTEGER_fail-integer-high>
        <#1integerMaxexclusiveDECIMALint_pass-integer-low>
        <#1integerMaxexclusiveDECIMALint_fail-integer-equal>
        <#1integerMaxexclusiveDECIMALint_fail-integer-high>
        <#1integerMaxexclusiveDOUBLEint_pass-integer-low>
        <#1integerMaxexclusiveDOUBLEint_fail-integer-equal>
        <#1integerMaxexclusiveDOUBLEint_fail-integer-high>
        <#1decimalMaxexclusiveINTEGER_pass-decimal-low>
        <#1decimalMaxexclusiveINTEGER_fail-decimal-high>
        <#1decimalMaxexclusiveDECIMAL_pass-decimal-low>
        <#1decimalMaxexclusiveDECIMAL_fail-decimal-equal>
        <#1decimalMaxexclusiveDECIMAL_fail-decimal-high>
        <#1decimalMaxexclusiveDOUBLE_pass-decimal-low>
        <#1decimalMaxexclusiveDOUBLE_fail-decimal-equal>
        <#1decimalMaxexclusiveDOUBLE_fail-decimal-high>
        <#1decimalMaxexclusiveDECIMAL_fail-float-equal>
        <#1decimalMaxexclusiveDECIMAL_fail-double-equal>
        <#1decimalMaxexclusivexsd-byte_fail-byte-equal>
        <#1decimalMaxexclusivexsd-decimal_fail-decimal-equal>
        <#1floatMaxexclusiveINTEGER_pass-float-low>
        <#1floatMaxexclusiveINTEGER_fail-float-high>
        <#1floatMaxexclusiveDECIMAL_pass-float-low>
        <#1floatMaxexclusiveDECIMAL_fail-float-high>
        <#1floatMaxexclusiveDOUBLE_pass-float-low>
        <#1floatMaxexclusiveDOUBLE_fail-float-high>
        <#1doubleMaxexclusiveINTEGER_pass-double-low>
        <#1doubleMaxexclusiveINTEGER_fail-double-equal>
        <#1doubleMaxexclusiveINTEGER_fail-double-high>
        <#1doubleMaxexclusiveINTEGERLead_fail-double-equal>
        <#1doubleMaxexclusiveDECIMAL_pass-double-low>
        <#1doubleMaxexclusiveDECIMAL_fail-double-equal>
        <#1doubleMaxexclusiveDECIMAL_fail-double-high>
        <#1doubleMaxexclusiveDECIMALLeadTrail_fail-double-equal>
        <#1doubleMaxexclusiveDECIMALint_fail-double-equal>
        <#1doubleMaxexclusiveDECIMALintLeadTrail_fail-double-equal>
        <#1doubleMaxexclusiveDOUBLE_pass-double-low>
        <#1doubleMaxexclusiveDOUBLE_fail-double-equal>
        <#1doubleMaxexclusiveDOUBLE_fail-double-high>
        <#1doubleMaxexclusiveDOUBLELeadTrail_fail-double-equal>
        <#1doubleMaxexclusiveDOUBLEint_fail-double-equal>
        <#1doubleMaxexclusiveDOUBLEintLeadTrail_fail-double-equal>
###   lengths
        <#1literalLength_fail-lit-short>
        <#1literalLength_pass-lit-equal>
        <#1literalLength_fail-lit-long>
        <#1literalLength_fail-iri-equal>
        <#1literalLength_fail-bnode-equal>
        <#1iriLength_fail-iri-short>
        <#1iriLength_pass-iri-equal>
        <#1iriLength_fail-iri-long>
        <#1iriLength_fail-lit-equal>
        <#1iriLength_fail-bnode-equal>
        <#1iriRefLength1_fail-iri-short>
        <#1iriRefLength1_pass-iri-equal>
        <#1iriRefLength1_fail-iri-long>
        <#1iriRefLength1_fail-lit-equal>
        <#1iriRefLength1_fail-bnode-equal>
        <#1bnodeLength_fail-bnode-short>
        <#1bnodeLength_pass-bnode-equal>
        <#1bnodeLength_fail-bnode-long>
        <#1bnodeLength_fail-lit-equal>
        <#1bnodeLength_fail-iri-equal>
        <#1nonliteralLength_fail-iri-short>
        <#1nonliteralLength_pass-iri-equal>
        <#1nonliteralLength_fail-iri-long>
        <#1nonliteralLength_fail-lit-equal>
        <#1nonliteralLength_fail-bnode-short>
        <#1nonliteralLength_pass-bnode-equal>
        <#1nonliteralLength_fail-bnode-long>
        <#1literalMinlength_fail-lit-short>
        <#1literalMinlength_pass-lit-equal>
        <#1literalMinlength_pass-lit-long>
        <#1iriMinlength_fail-iri-short>
        <#1iriMinlength_pass-iri-equal>
        <#1iriMinlength_pass-iri-long>
        <#1bnodeMinlength_fail-bnode-short>
        <#1bnodeMinlength_pass-bnode-equal>
        <#1bnodeMinlength_pass-bnode-long>
        <#1nonliteralMinlength_fail-iri-short>
        <#1nonliteralMinlength_pass-iri-equal>
        <#1nonliteralMinlength_pass-iri-long>
        <#1nonliteralMinlength_fail-bnode-short>
        <#1nonliteralMinlength_pass-bnode-equal>
        <#1nonliteralMinlength_pass-bnode-long>
        <#1literalMaxlength_pass-lit-short>
        <#1literalMaxlength_pass-lit-equal>
        <#1literalMaxlength_fail-lit-long>
        <#1iriMaxlength_pass-iri-short>
        <#1iriMaxlength_pass-iri-equal>
        <#1iriMaxlength_fail-iri-long>
        <#1bnodeMaxlength_pass-bnode-short>
        <#1bnodeMaxlength_pass-bnode-equal>
        <#1bnodeMaxlength_fail-bnode-long>
        <#1nonliteralMaxlength_pass-iri-short>
        <#1nonliteralMaxlength_pass-iri-equal>
        <#1nonliteralMaxlength_fail-iri-long>
        <#1nonliteralMaxlength_pass-bnode-short>
        <#1nonliteralMaxlength_pass-bnode-equal>
        <#1nonliteralMaxlength_fail-bnode-long>
###   pattern
        <#1literalPattern_pass-lit-match>
        <#1literalPattern_fail-lit-short>
        <#1literalPattern_fail-lit-long>
        <#1literalPattern19_fail-iri-match>
        <#1literalPattern_fail-bnode-match>
        <#1literalPatternabEnd_fail-bnode-match>
        <#1iriPattern_pass-iri-match>
        <#1iriPattern_fail-iri-short>
        <#1iriPattern_fail-iri-long>
        <#1iriPattern_fail-lit-match>
        <#1iriPattern_fail-bnode-match>
        <#1bnodePattern_pass-bnode-match>
        <#1bnodePattern_fail-bnode-short>
        <#1bnodePattern_fail-bnode-long>
        <#1bnodePattern_fail-lit-match>
        <#1bnodePattern_fail-iri-match>
        <#1nonliteralPattern_pass-iri-match>
        <#1nonliteralPattern_fail-iri-short>
        <#1nonliteralPattern_fail-iri-long>
        <#1nonliteralPattern_fail-lit-match>
        <#1nonliteralPattern_pass-bnode-match>
        <#1nonliteralPattern_fail-bnode-short>
        <#1nonliteralPattern_fail-bnode-long>

## value sets
        <#1val1dotMinusiri3_pass>
        <#1val1dotMinusiri3_v1>
        <#1val1dotMinusiri3_v2>
        <#1val1dotMinusiri3_v3>
	<#1val1refvsMinusiri3_pass>
	<#1val1refvsMinusiri3_v1>
	<#1val1refvsMinusiri3_v2>
	<#1val1refvsMinusiri3_v3>
        <#1val1dotMinusiriStem3_pass>
        <#1val1dotMinusiriStem3_v1>
        <#1val1dotMinusiriStem3_v2>
        <#1val1dotMinusiriStem3_v3>
        <#1val1dotMinusiriStem3_v1a>
        <#1val1iriStem_passv1>
        <#1val1iriStem_passv1a>
        <#1val1iriStem_fail>
        <#1val1iriStemMinusiri3_passIv>
        <#1val1iriStemMinusiri3_passIv4>
        <#1val1iriStemMinusiri3_v1>
        <#1val1iriStemMinusiri3_v2>
        <#1val1iriStemMinusiri3_v3>
        <#1val1iriStemMinusiri3_passIv1a>
        <#1val1iriStemMinusiriStem3_passIv>
        <#1val1iriStemMinusiriStem3_passIv4>
        <#1val1iriStemMinusiriStem3_v1>
        <#1val1iriStemMinusiriStem3_v2>
        <#1val1iriStemMinusiriStem3_v3>
        <#1val1iriStemMinusiriStem3_v1a>

## triple expressions
###   AND tripleExpr

###   OR tripleExpr
        <#1dotOr2dot_pass_p1>
        <#1dotOr2dot_pass_p2p3>
        <#1dotOr2dot-oneOf_fail_p1p2p3>
        <#1dotOr2dot-someOf_pass_p1p2p3>
        #<#1dotOr2dot-firstOf_pass_p1p2p3>
        # open1dotOropen2dotcloseclose_... same as 1dotOr2dot
        # @@ eliminate as duplicate?
        <#open1dotOropen2dotcloseclose_pass_p1>
        <#open1dotOropen2dotcloseclose_pass_p2p3>
        <#open1dotOropen2dotcloseclose_fail_p1p2p3>
        # 1dotCommaOr2dotCommas_... same as 1dotOr2dot
        # open1dotCommaOr2dotcommasclose_... same as 1dotOr2dot
        # open1dotCommaOropen2dotCommascloseclose_... same as 1dotOr2dot
        # open1dotOr2dotclose_... same as 1dotOr2dot
        <#openopen1dotOr1dotclose1dotclose_pass_p1p3>
        <#openopen1dotOr1dotclose1dotclose_pass_p2p3>
        <#openopen1dotOr1dotclose1dotclose_fail_p1>
        <#openopen1dotOr1dotclose1dotclose_fail_p3>
        <#openopen1dotOr1dotclose1dotclose_fail_p1p2>
        # openopen1dotCommaOr1dotCommaclose1dotCommacloseComma_... same as openopen1dotOr1dotclose1dotclose

## value expressions
###   value reference
        <#1val1vExprRefIRIREF1_fail-lit-short>
	<#1val1vExprRefIRIREF1_pass-lit-equal>
	<#1val1vExprRefbnode1_fail-lit-short>
	<#1val1vExprRefbnode1_pass-lit-equal>
###   AND valueExpr
	<#1dotRefAnd3_failAll>
	<#1dotRefAnd3_failShape2Shape3>
	<#1dotRefAnd3_failShape1Shape3>
	<#1dotRefAnd3_failShape1Shape2>
	<#1dotRefAnd3_passShape1Shape2Shape3>
        <#1val1vExprANDRef3_pass>
        <#1val1vExprANDRef3_failvc1>
        <#1val1vExprANDRef3_failvc2>
        <#1val1vExprANDRef3_failvc3>
        <#1val1vExprRefAND3_pass>
        <#1val1vExprRefAND3_failvc3>
        <#1val1vExprRefAND3_failvc2>
        <#1val1vExprRefAND3_failvc1>
        <#1val1vExprAND3_pass>
        <#1val1vExprAND3_failvc1>
        <#1val1vExprAND3_failvc2>
        <#1val1vExprAND3_failvc3>

###   OR valueExpr
	<#1dotRefOr3_fail>
	<#1dotRefOr3_passShape1>
	<#1dotRefOr3_passShape2>
	<#1dotRefOr3_passShape3>
	<#1dotRefOr3_passShape1Shape2Shape3>
        <#1val1vExprORRef3_fail>
        <#1val1vExprORRef3_passvc1>
        <#1val1vExprORRef3_passvc2>
        <#1val1vExprORRef3_passvc3>
        <#1val1vExprORRef3_passvc1vc2vc3>
        <#1val1vExprRefOR3_passvc1vc2vc3>
        <#1val1vExprRefOR3_passvc3>
        <#1val1vExprRefOR3_passvc2>
        <#1val1vExprRefOR3_passvc1>
        <#1val1vExprRefOR3_fail>
        <#1val1vExprOR3_fail>
        <#1val1vExprOR3_passvc1>
        <#1val1vExprOR3_passvc2>
        <#1val1vExprOR3_passvc3>
        <#1val1vExprOR3_passvc1vc2vc3>

## closed
        <#1dotClosed_pass>
        <#1dotClosed_fail_lower>
        <#1dotClosed_fail_higher>

## extra
        <#1val1IRIREFExtra1_pass-iri1>
        <#1val1IRIREFExtra1_pass-iri2>
        <#1val2IRIREFExtra1_fail-iri2>
        <#1val2IRIREFPlusExtra1_pass-iri2>
        <#1val2IRIREFExtra1_pass-iri-bnode>
        <#1val1IRIREFExtra1p2_pass-iri1>
        <#1val1IRIREFExtra1p2_pass-iri2>
        <#1val1IRIREFExtra1Or_pass-iri1>
        <#1val1IRIREFExtra1Or_pass-iri2>
        <#1dotExtra1_pass-iri1>
        <#1dotExtra1_fail-iri2>
        <#3groupdotExtra3_pass-iri1> <#3groupdot3Extra_pass-iri1> <#3groupdotExtra3NLex_pass-iri1>
        <#3groupdotExtra3_pass-iri2> <#3groupdot3Extra_pass-iri2> <#3groupdotExtra3NLex_pass-iri2>

## start
        <#startRefIRIREF_pass-noOthers>
        <#startRefIRIREF_pass-others_lexicallyEarlier>
        <#startRefIRIREF_fail-missing>
        <#startRefbnode_pass-noOthers>
        <#startRefbnode_fail-missing>
        <#startInline_pass-noOthers>
        <#startEqualSpaceInline_pass-noOthers>
        <#startSpaceEqualInline_pass-noOthers>
        <#startInline_fail-missing>

## include
        <#2eachInclude1_pass>
        <#2eachInclude1-after_pass>
        <#2someInclude1_pass>
        <#2someInclude1-after_pass>

## annotations
        <#1dotAnnotIRIREF_pass>
        <#1dotAnnotIRIREF_missing>
        <#1dotAnnotSTRING_LITERAL1_pass>
        <#1dotAnnot3_pass>
        <#1dotAnnot3_missing>
        <#1inversedotAnnot3_pass>
        <#1inversedotAnnot3_missing>

## semantic actions
        <#1dotCode1_pass>
        <#1inversedotCode1_pass>
        <#1dotCode3_pass>
        <#1dotCode3fail_abort>
        <#1dotCodeWithEscapes1_pass>
        <#1dotShapeCode1_pass>
        <#open3groupdotcloseCode1-p1p2p3>
        <#startCode1_pass>
        <#startCode1fail_abort>
        <#startCode1startRef_pass>
        <#startCode1startReffail_abort>
        <#startCode3_pass>
        <#startCode3fail_abort>

## annotations + semantic actions
        <#open3groupdotclosecard23Annot3Code2-p1p2p3X3>

## manual schemas
        <#iovka>
        <#greedy>
        <#skipped>
        <#repeated-group>
        <#simple-group>
        <#PstarT>
        <#PTstar>
        <#PstarTstar>
        <#P2T2>
    ) .

# definitions
## empty {

<#0_empty> a sht:ValidationTest ;
    mf:name "0_empty" ;
    sht:trait sht:Empty ;
    rdfs:comment "<S> {  } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/0.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/dummy>
    ] ;
    mf:result <0_dummy.val>
    .

<#0_other> a sht:ValidationTest ;
    mf:name "0_other" ;
    sht:trait sht:Empty ;
    rdfs:comment "<S> {  } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/0.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <0_pass.val>
    .
## } empty
## triple pattern {

<#1dot_fail-empty> a sht:ValidationFailure ;
    mf:name "1dot_fail-empty" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1dot_fail-missing> a sht:ValidationFailure ;
    mf:name "1dot_fail-missing" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1dot_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dot_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotComma_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotComma_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX : <http://a.example/> <S> { :p1 ., } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotComma.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotLNex_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotLNex_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX ex: <http://a.example/> ex:S1 { ex:p1 . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotLNex.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotNS2_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotNS2_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX S1: <http://a.example/S1> PREFIX p1: <http://a.example/p1> S1: { p1: . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotNS2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotNS2Comment_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotNS2Comment_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX S1: <http://a.example/S1> PREFIX p1: <http://a.example/p1> S1: { p1:/*comment*/ . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotNS2Comment.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotLNexComment_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotLNexComment_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX ex: <http://a.example/> ex:S1 { ex:p1/*comment*/ . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotLNexComment.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotLNdefault_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotLNdefault_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX : <http://a.example/> :S1 { :p1 . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotLNdefault.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotNSdefault_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotNSdefault_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX : <http://a.example/p1> <S1> { : . } on { <s> :p1 <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotNSdefault.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotLNex-HYPHEN_MINUS_pass-noOthers> a sht:ValidationTest ;
    mf:name "1dotLNex-HYPHEN_MINUS_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "PREFIX ex: <http://a.example/> ex:S1 { ex:p1- . } on { <s> <p1-> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotLNex-HYPHEN_MINUS.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1HYPHEN_MINUS_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1HYPHEN_MINUSdot_pass.val>
    .

<#1dot_pass-others_lexicallyEarlier> a sht:ValidationTest ;
    mf:name "1dot_pass-others_lexicallyEarlier" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dot_pass-others_lexicallyLater> a sht:ValidationTest ;
    mf:name "1dot_pass-others_lexicallyLater" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1>; <p2> <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1;Ip2_Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#bnode1dot_fail-missing> a sht:ValidationFailure ;
    mf:name "bnode1dot_fail-missing" ;
    sht:trait sht:ToldBNode , sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/bnode1dot.shex> ;
      sht:shape _:S1 ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#bnode1dot_pass-others_lexicallyEarlier> a sht:ValidationTest ;
    mf:name "bnode1dot_pass-others_lexicallyEarlier" ;
    sht:trait sht:ToldBNode , sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/bnode1dot.shex> ;
      sht:shape _:S1 ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <bnode1dot_pass.val>
    .

<#1inversedot_fail-empty> a sht:ValidationFailure ;
    mf:name "1inversedot_fail-empty" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/o1>
    ]
    .

<#1inversedot_fail-missing> a sht:ValidationFailure ;
    mf:name "1inversedot_fail-missing" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ]
    .

<#1inversedot_pass-noOthers> a sht:ValidationTest ;
    mf:name "1inversedot_pass-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1inversedot_pass.val>
    .

<#1inversedot_pass-over_lexicallyEarlier> a sht:ValidationTest ;
    mf:name "1inversedot_pass-over_lexicallyEarlier" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1inversedot_pass.val>
    .

<#1inversedot_pass-over_lexicallyLater> a sht:ValidationTest ;
    mf:name "1inversedot_pass-over_lexicallyLater" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1>; <p2> <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1;Ip2_Io2.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1inversedot_pass.val>
    .

<#1negateddot_pass-empty> a sht:ValidationTest ;
    mf:name "1negateddot_pass-empty" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negateddot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1negateddot_pass.val>
    .

<#1negateddot_pass-missing> a sht:ValidationTest ;
    mf:name "1negateddot_pass-missing" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negateddot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1negateddot_pass.val>
    .

<#1negateddot_fail-noOthers> a sht:ValidationFailure ;
    mf:name "1negateddot_fail-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negateddot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1negateddot_fail-others_lexicallyEarlier> a sht:ValidationFailure ;
    mf:name "1negateddot_fail-others_lexicallyEarlier" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negateddot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1negateddot_fail-others_lexicallyLater> a sht:ValidationFailure ;
    mf:name "1negateddot_fail-others_lexicallyLater" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p1> <o1>; <p2> <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negateddot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1;Ip2_Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1negatedinversedot_pass-empty> a sht:ValidationTest ;
    mf:name "1negatedinversedot_pass-empty" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negatedinversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1negatedinversedot_pass.val>
    .

<#1negatedinversedot_pass-missing> a sht:ValidationTest ;
    mf:name "1negatedinversedot_pass-missing" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negatedinversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1negatedinversedot_pass.val>
    .

<#1negatedinversedot_fail-noOthers> a sht:ValidationFailure ;
    mf:name "1negatedinversedot_fail-noOthers" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negatedinversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    .

<#1negatedinversedot_fail-others_lexicallyEarlier> a sht:ValidationFailure ;
    mf:name "1negatedinversedot_fail-others_lexicallyEarlier" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negatedinversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    .

<#1negatedinversedot_fail-others_lexicallyLater> a sht:ValidationFailure ;
    mf:name "1negatedinversedot_fail-others_lexicallyLater" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { !<p1> . } on { <s> <p1> <o1>; <p2> <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1negatedinversedot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1;Ip2_Io2.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    .

<#1Adot_pass> a sht:ValidationTest ;
    mf:name "1Adot_pass" ;
    sht:trait sht:TriplePattern ;
    rdfs:comment "<S> { a . } on { <s> a <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1Adot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_a_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1Adot_pass.val>
    .

## } triple pattern
## node kinds {

<#1iri_pass-iri> a sht:ValidationTest ;
    mf:name "1iri_pass-iri" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> IRI } on { <s1> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iri.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iri_pass-iri.val>
    .

<#1iri_fail-bnode> a sht:ValidationFailure ;
    mf:name "1iri_fail-bnode" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> IRI } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iri.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iri_fail-literal> a sht:ValidationFailure ;
    mf:name "1iri_fail-literal" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> IRI } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iri.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnode_fail-iri> a sht:ValidationFailure ;
    mf:name "1bnode_fail-iri" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> BNODE } on { <s1> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnode.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnode_pass-bnode> a sht:ValidationTest ;
    mf:name "1bnode_pass-bnode" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> BNODE } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnode.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnode_pass-bnode.val>
    .

<#1bnode_fail-literal> a sht:ValidationFailure ;
    mf:name "1bnode_fail-literal" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> BNODE } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnode.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literal_fail-iri> a sht:ValidationFailure ;
    mf:name "1literal_fail-iri" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> LITERAL } on { <s1> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literal_fail-bnode> a sht:ValidationFailure ;
    mf:name "1literal_fail-bnode" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> LITERAL } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literal_pass-literal> a sht:ValidationTest ;
    mf:name "1literal_pass-literal" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> LITERAL } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literal_pass-literal.val>
    .

<#1nonliteral_pass-iri> a sht:ValidationTest ;
    mf:name "1nonliteral_pass-iri" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> NONLITERAL } on { <s1> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteral.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteral_pass-iri.val>
    .

<#1nonliteral_pass-bnode> a sht:ValidationTest ;
    mf:name "1nonliteral_pass-bnode" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> NONLITERAL } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteral.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteral_pass-bnode.val>
    .

<#1nonliteral_fail-literal> a sht:ValidationFailure ;
    mf:name "1nonliteral_fail-literal" ;
    sht:trait sht:NodeKind ;
    rdfs:comment "<S1> { <p1> NONLITERAL } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteral.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

## } node kinds
## datatype {

<#1datatype_missing> a sht:ValidationFailure ;
    mf:name "1datatype_missing" ;
    sht:trait sht:Datatype ;
    rdfs:comment "<S> { <p1> <dt1> } on <s> in { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatype_nonLiteral> a sht:ValidationFailure ;
    mf:name "1datatype_nonLiteral" ;
    sht:trait sht:Datatype ;
    rdfs:comment "<S> { <p1> <dt1> } on <s> in { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatype_wrongDatatype> a sht:ValidationFailure ;
    mf:name "1datatype_wrongDatatype" ;
    sht:trait sht:Datatype ;
    rdfs:comment "<S> { <p1> <dt1> } on <s> in { <s> <p1> 1.234 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1.345.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatype_pass> a sht:ValidationTest ;
    mf:name "1datatype_pass" ;
    sht:trait sht:Datatype ;
    rdfs:comment "<S> { <p1> <dt1> } on <s> in { <s> <p1> 'ab'^^<dt1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_dt1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1datatype_pass.val>
    .

## } datatype
## cardinality {
###   dot cardinality {

<#1card2_fail0> a sht:ValidationFailure ;
    mf:name "1card2_fail0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2} } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card2_fail1> a sht:ValidationFailure ;
    mf:name "1card2_fail1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2} } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card2_pass2> a sht:ValidationTest ;
    mf:name "1card2_pass2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2} } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card2_pass2.val>
    .

<#1card2_fail3> a sht:ValidationFailure ;
    mf:name "1card2_fail3" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2} } on { <s> <p1> 'a','b','c' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card25_fail0> a sht:ValidationFailure ;
    mf:name "1card25_fail0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card25_fail1> a sht:ValidationFailure ;
    mf:name "1card25_fail1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card25_pass2> a sht:ValidationTest ;
    mf:name "1card25_pass2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card25_pass2.val>
    .

<#1card25_pass3> a sht:ValidationTest ;
    mf:name "1card25_pass3" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a','b','c' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card25_pass3.val>
    .

<#1card25_pass4> a sht:ValidationTest ;
    mf:name "1card25_pass4" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a','b','c','d' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card25_pass4.val>
    .

<#1card25_pass5> a sht:ValidationTest ;
    mf:name "1card25_pass5" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a','b','c','d','e' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card25_pass5.val>
    .

<#1card25_fail6> a sht:ValidationFailure ;
    mf:name "1card25_fail6" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,5} } on { <s> <p1> 'a','b','c','d','e','f' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card25.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le,Lf.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card2Star_fail0> a sht:ValidationFailure ;
    mf:name "1card2Star_fail0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,*} } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2Star.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card2Star_fail1> a sht:ValidationFailure ;
    mf:name "1card2Star_fail1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,*} } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2Star.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1card2Star_pass2> a sht:ValidationTest ;
    mf:name "1card2Star_pass2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,*} } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2Star.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card2Star_pass2.val>
    .

<#1card2Star_pass3> a sht:ValidationTest ;
    mf:name "1card2Star_pass3" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,*} } on { <s> <p1> 'a','b','c' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2Star.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card2Star_pass3.val>
    .

<#1card2Star_pass6> a sht:ValidationTest ;
    mf:name "1card2Star_pass6" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .{2,*} } on { <s> <p1> 'a','b','c','d','e','f' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1card2Star.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le,Lf.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1card2Star_pass6.val>
    .

<#1cardOpt_pass0> a sht:ValidationTest ;
    mf:name "1cardOpt_pass0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardOpt.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardOpt_pass0.val>
    .

<#1cardOpt_pass1> a sht:ValidationTest ;
    mf:name "1cardOpt_pass1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardOpt.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardOpt_pass1.val>
    .

<#1cardOpt_fail2> a sht:ValidationFailure ;
    mf:name "1cardOpt_fail2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardOpt.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1cardOpt_pass6> a sht:ValidationFailure ;
    mf:name "1cardOpt_pass6" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a','b','c','d','e','f' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardOpt.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le,Lf.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1cardPlus_fail0> a sht:ValidationFailure ;
    mf:name "1cardPlus_fail0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardPlus.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1cardPlus_pass1> a sht:ValidationTest ;
    mf:name "1cardPlus_pass1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardPlus.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardPlus_pass1.val>
    .

<#1cardPlus_pass2> a sht:ValidationTest ;
    mf:name "1cardPlus_pass2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardPlus.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardPlus_pass2.val>
    .

<#1cardPlus_pass6> a sht:ValidationTest ;
    mf:name "1cardPlus_pass6" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .+ } on { <s> <p1> 'a','b','c','d','e','f' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardPlus.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le,Lf.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardPlus_pass6.val>
    .

<#1cardStar_pass0> a sht:ValidationTest ;
    mf:name "1cardStar_pass0" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .* } on {  }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardStar.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <empty.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardStar_pass0.val>
    .

<#1cardStar_pass1> a sht:ValidationTest ;
    mf:name "1cardStar_pass1" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .* } on { <s> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardStar.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardStar_pass1.val>
    .

<#1cardStar_pass2> a sht:ValidationTest ;
    mf:name "1cardStar_pass2" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .* } on { <s> <p1> 'a','b' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardStar.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardStar_pass2.val>
    .

<#1cardStar_pass6> a sht:ValidationTest ;
    mf:name "1cardStar_pass6" ;
    sht:trait sht:DotCardinality ;
    rdfs:comment "<S> { <p1> .* } on { <s> <p1> 'a','b','c','d','e','f' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1cardStar.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Lb,Lc,Ld,Le,Lf.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1cardStar_pass6.val>
    .
###   } dot cardinality
###   non-dot cardinality {
<#1literalPlus_Is1_Ip1_La,Io1> a sht:ValidationFailure ;
    mf:name "1literalPlus_Is1_Ip1_La,Io1" ;
    sht:trait sht:NonDotCardinality ;
    rdfs:comment "<S> { <p1> LITERAL+ } on { <s> <p1> 'a', <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPlus.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La,Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

###   } non-dot cardinality
## } cardinality
## shape reference {

<#1dotRef1_referent,referrer> a sht:ValidationTest ;
    mf:name "1dotRef1_referent,referrer" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n2> <p2> \"X\" . <n1> <p1> <n2> } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In2_Ip2_LX.In1_Ip1_In2.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <In2_Ip2_In1@In1_Ip1_LX.val>
    .

<#1dotRef1_referrer,referent> a sht:ValidationTest ;
    mf:name "1dotRef1_referrer,referent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n2> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <In2_Ip2_In1@In1_Ip1_LX.val>
    .

<#1dotRef1_missingReferent> a sht:ValidationFailure ;
    mf:name "1dotRef1_missingReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n2> } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRef1_selfReference> a sht:ValidationTest ;
    mf:name "1dotRef1_selfReference" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n1> . <n1> <p2> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In1.In1_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRef1_selfReference.val>
    .

<#1dotRef1_missingSelfReference> a sht:ValidationFailure ;
    mf:name "1dotRef1_missingSelfReference" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n1> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In1.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRef1_overReferrer> a sht:ValidationFailure ;
    mf:name "1dotRef1_overReferrer" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n2>, <n3> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In1_Ip1_In3.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRef1_overReferrer,overReferent> a sht:ValidationFailure ;
    mf:name "1dotRef1_overReferrer,overReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n2>, <n3> . <n2> <p2> \"X\" . <n3> <p2> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In1_Ip1_In3.In2_Ip2_LX.In3_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRef1_overMatchesReferent> a sht:ValidationTest ;
    mf:name "1dotRef1_overMatchesReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n1> in { <n1> <p1> <n2> . <n2> <p2> \"X\" . <n3> <p1> \"X\" } as <S1> in <S1> { <p1> @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.In3_Ip1_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <In2_Ip2_In1@In1_Ip1_LX.val>
    .

 # !../schemas/1dotRefLNex.shex
 # !../schemas/1dotRefSpaceLNex.shex [1dotRefLNex.shex]
 # !../schemas/1dotRefNS1.shex
 # !../schemas/1dotRefSpaceNS1.shex [1dotRefNS1.shex]

<#1refbnode1_pass> a sht:ValidationTest ;
    mf:name "1refbnode1_pass" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<S1> { <p1> @_:S2 } _:S2 { <p2> . } on { <n1> <p1> <n2> . <n2> <p2> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1refbnode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1refbnode1_pass.val>
    .

<#1refbnode1_fail-g1-arc> a sht:ValidationFailure ;
    mf:name "1refbnode1_fail-g1-arc" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<S1> { <p1> @_:S2 } _:S2 { <p2> . } on { <n1> <p2> <n2> . <n2> <p2> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1refbnode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip2_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1refbnode1_fail-g2-arc> a sht:ValidationFailure ;
    mf:name "1refbnode1_fail-g2-arc" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<S1> { <p1> @_:S2 } _:S2 { <p2> . } on { <n1> <p1> <n2> . <n2> <p1> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1refbnode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip1_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

 # !../schemas/1refbnode_with_leading_digit1.shex
 # !../schemas/1refbnode_with_leading_underscore1.shex
 # !../schemas/1refbnode_with_spanning_PN_CHARS1.shex
 # !../schemas/1refbnode_with_spanning_PN_CHARS_BASE1.shex

<#3circularRef1_pass-open> a sht:ValidationTest ;
    mf:name "3circularRef1_pass-open" ;
    sht:trait sht:ShapeReference , sht:EachOf ;
    rdfs:comment "<S1> { <p1> ., <p2> @<S2>? } <S2> { <p3> @<S3> } <S3> { <p4> @<S1> } <S4> { <p5> . } on { <n1> <p1> \"X\" ; <p2> <n2> . <n2> <p3> <n3> . <n3> <p4> <n5> . <n5> <p1> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3circularRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <3circularRef1_pass-open.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <3circularRef1_pass-open.val>
    .

<#3circularRef1_pass-closed> a sht:ValidationTest ;
    mf:name "3circularRef1_pass-closed" ;
    sht:trait sht:ShapeReference , sht:EachOf ;
    rdfs:comment "<S1> { <p1> ., <p2> @<S2>? } <S2> { <p3> @<S3> } <S3> { <p4> @<S1> } <S4> { <p5> . } on { <n1> <p1> \"X\" ; <p2> <n2> . <n2> <p3> <n3> . <n3> <p4> <n1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3circularRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <3circularRef1_pass-closed.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <3circularRef1_pass-closed.val>
    .

<#1iriRef1_pass-iri> a sht:ValidationTest ;
    mf:name "1iriRef1_pass-iri" ;
    sht:trait sht:ShapeReference, sht:NodeKind ;
    rdfs:comment "<n1> in { <n1> <p1> <n2> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> IRI @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1iriRef1_pass-iri.val>
    .

<#1iriRef1_fail-bnode> a sht:ValidationFailure ;
    mf:name "1iriRef1_fail-bnode" ;
    sht:trait sht:ShapeReference, sht:NodeKind ;
    rdfs:comment "<n1> in { <n1> <p1> _:n1 . _:n1 <p2> \"X\" } as <S1> in <S1> { <p1> IRI @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_Bn2.Bn2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1bnodeRef1_fail-iri> a sht:ValidationFailure ;
    mf:name "1bnodeRef1_fail-iri" ;
    sht:trait sht:ShapeReference, sht:NodeKind ;
    rdfs:comment "<n1> in { <n1> <p1> <n2> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> BNODE @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1bnodeRef1_pass-bnode> a sht:ValidationTest ;
    mf:name "1bnodeRef1_pass-bnode" ;
    sht:trait sht:ShapeReference, sht:NodeKind ;
    rdfs:comment "<n1> in { <n1> <p1> _:n1 . _:n1 <p2> \"X\" } as <S1> in <S1> { <p1> BNODE @<S2> } <S2> { <p2> . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeRef1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_Bn2.Bn2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1bnodeRef1_pass-bnode.val>
    .

## } shape reference
## inline {

<#1dotInline1_referrer,referent> a sht:ValidationTest ;
    mf:name "1dotInline1_referrer,referent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n2> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotInline1_In1_Ip1_In2.In2_Ip2_LX.val>
    .

<#1dotInline1_missingReferent> a sht:ValidationFailure ;
    mf:name "1dotInline1_missingReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n2> } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotInline1_selfReference> a sht:ValidationTest ;
    mf:name "1dotInline1_selfReference" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n1> . <n1> <p2> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In1.In1_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotInline1_In1_Ip1_In1.In1_Ip2_LX.val>
    .

<#1dotInline1_missingSelfReference> a sht:ValidationFailure ;
    mf:name "1dotInline1_missingSelfReference" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n1> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In1.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotInline1_overReferrer> a sht:ValidationFailure ;
    mf:name "1dotInline1_overReferrer" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n2>, <n3> . <n2> <p2> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In1_Ip1_In3.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotInline1_overReferrer,overReferent> a sht:ValidationFailure ;
    mf:name "1dotInline1_overReferrer,overReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n2>, <n3> . <n2> <p2> \"X\" . <n3> <p2> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In1_Ip1_In3.In2_Ip2_LX.In3_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotInline1_overMatchesReferent> a sht:ValidationTest ;
    mf:name "1dotInline1_overMatchesReferent" ;
    sht:trait sht:ShapeReference ;
    rdfs:comment "<n2> in { <n1> <p1> <n2> . <n2> <p2> \"X\" . <n3> <p1> \"X\" } as <S1> in <S1> { <p1> { <p2> . } }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotInline1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.In3_Ip1_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotInline1_In1_Ip1_In2.In2_Ip2_LX.val>
    .

## } inline
## term equivalence {
###   iri equivalence {

<#1val1IRIREF_pass> a sht:ValidationTest ;
    mf:name "1val1IRIREF_pass" ;
    sht:trait sht:IriEquivalence ;
    rdfs:comment "<S> { <p1> [<v1>] } on { <s> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREF.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREF_pass.val>
    .

<#1val1IRIREF_v2> a sht:ValidationFailure ;
    mf:name "1val1IRIREF_v2" ;
    sht:trait sht:IriEquivalence ;
    rdfs:comment "<S> { <p1> [<v1>] } on { <s> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREF.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1IRIREF_v1v2> a sht:ValidationFailure ;
    mf:name "1val1IRIREF_v1v2" ;
    sht:trait sht:IriEquivalence ;
    rdfs:comment "<S> { <p1> [<v1>] } on { <s> <p1> <v1>, <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREF.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1,Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

###   } iri equivalence
###   literal equivalence {
####     numeric equivalence {

<#1val1INTEGER_pass> a sht:ValidationTest ;
    mf:name "1val1INTEGER_pass" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0] } on { <s> <p1> 0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1INTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1INTEGER_pass.val>
    .

<#1val1INTEGER_Lab> a sht:ValidationFailure ;
    mf:name "1val1INTEGER_Lab" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0] } on { <s> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1INTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1INTEGER_00> a sht:ValidationFailure ;
    mf:name "1val1INTEGER_00" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0] } on { <s> <p1> 00 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1INTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT00.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1DOUBLE_pass> a sht:ValidationTest ;
    mf:name "1val1DOUBLE_pass" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1DOUBLE_pass.val>
    .

<#1val1DOUBLE_passUC> a sht:ValidationTest ;
    mf:name "1val1DOUBLE_passUC" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0E0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1DOUBLE_pass.val>
    .

<#1val1DOUBLE_0_0e0> a sht:ValidationFailure ;
    mf:name "1val1DOUBLE_0_0e0" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0e0.0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0_0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1DOUBLElowercase_pass> a sht:ValidationTest ;
    mf:name "1val1DOUBLElowercase_pass" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLElowercase.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1DOUBLE_pass.val>
    .

<#1val1DOUBLElowercase_passUC> a sht:ValidationTest ;
    mf:name "1val1DOUBLElowercase_passUC" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0E0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLElowercase.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1DOUBLE_pass.val>
    .

<#1val1DOUBLElowercase_0_0e0> a sht:ValidationFailure ;
    mf:name "1val1DOUBLElowercase_0_0e0" ;
    sht:trait sht:NumericEquivalence ;
    rdfs:comment "<S> { <p1> [0e0] } on { <s> <p1> 0e0.0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1DOUBLElowercase.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL0_0e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

####     } numeric equivalence
####     language tag equivalence {

<#1val1LANGTAG_pass> a sht:ValidationTest ;
    mf:name "1val1LANGTAG_pass" ;
    sht:trait sht:LanguageTagEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'@en-fr] } on { <s> <p1> 'ab'@en-fr }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1LANGTAG.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LabLTen-fr.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1LANGTAG_pass.val>
    .

<#1val1LANGTAG_Lab> a sht:ValidationFailure ;
    mf:name "1val1LANGTAG_Lab" ;
    sht:trait sht:LanguageTagEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'@en-fr] } on { <s> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1LANGTAG.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1LANGTAG_LabLTen> a sht:ValidationFailure ;
    mf:name "1val1LANGTAG_LabLTen" ;
    sht:trait sht:LanguageTagEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'@en-fr] } on { <s> <p1> 'ab'@en }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1LANGTAG.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LabLTen.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1LANGTAG_LabLTen-fr-jura> a sht:ValidationFailure ;
    mf:name "1val1LANGTAG_LabLTen-fr-jura" ;
    sht:trait sht:LanguageTagEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'@en-fr] } on { <s> <p1> 'ab'@en-fr-jura }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1LANGTAG.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LabLTen-fr-jura.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1LANGTAG_LaLTen-fr> a sht:ValidationFailure ;
    mf:name "1val1LANGTAG_LaLTen-fr" ;
    sht:trait sht:LanguageTagEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'@en-fr] } on { <s> <p1> 'a'@en-fr }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1LANGTAG.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LaLTen-fr.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

####     } language tag equivalence
####     datatyped literal equivalence {

<#1val1IRIREFDatatype_pass> a sht:ValidationTest ;
    mf:name "1val1IRIREFDatatype_pass" ;
    sht:trait sht:DatatypedLiteralEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'^^my:bloodType] } on { <s> <p1> 'ab'^^my:bloodType }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFDatatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LabDTbloodType.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFDatatype_pass.val>
    .

<#1val1IRIREFDatatype_Lab> a sht:ValidationFailure ;
    mf:name "1val1IRIREFDatatype_Lab" ;
    sht:trait sht:DatatypedLiteralEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'^^my:bloodType] } on { <s> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFDatatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1IRIREFDatatype_LabDTbloodType999> a sht:ValidationFailure ;
    mf:name "1val1IRIREFDatatype_LabDTbloodType999" ;
    sht:trait sht:DatatypedLiteralEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'^^my:bloodType] } on { <s> <p1> 'ab'^^my:bloodType999 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFDatatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LabDTbloodType999.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1IRIREFDatatype_LaDTbloodType> a sht:ValidationFailure ;
    mf:name "1val1IRIREFDatatype_LaDTbloodType" ;
    sht:trait sht:DatatypedLiteralEquivalence ;
    rdfs:comment "<S> { <p1> ['ab'^^my:bloodType] } on { <s> <p1> 'a'^^my:bloodType }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFDatatype.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_LaDTbloodType.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

####     } datatyped literal equivalence
####     boolean equivalence {

<#1val1true_pass> a sht:ValidationTest ;
    mf:name "1val1true_pass" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [true] } on { <s> <p1> true }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1true.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_true.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1true_pass.val>
    .

<#1val1true_false> a sht:ValidationFailure ;
    mf:name "1val1true_false" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [true] } on { <s> <p1> false }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1true.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_false.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1true_ab> a sht:ValidationFailure ;
    mf:name "1val1true_ab" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [true] } on { <s> <p1> ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1true.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1false_pass> a sht:ValidationTest ;
    mf:name "1val1false_pass" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [false] } on { <s> <p1> true }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1false.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_false.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1false_pass.val>
    .

<#1val1false_true> a sht:ValidationFailure ;
    mf:name "1val1false_true" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [false] } on { <s> <p1> false }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1false.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_true.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1false_ab> a sht:ValidationFailure ;
    mf:name "1val1false_ab" ;
    sht:trait sht:BooleanEquivalence ;
    rdfs:comment "<S> { <p1> [false] } on { <s> <p1> ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1false.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

####     } boolean equivalence
###   } literal equivalence
## } term equivalence
## facets {
###   length {

<#1datatypeLength_fail-missing> a sht:ValidationFailure ;
    mf:name "1datatypeLength_fail-missing" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S> { <p1> xs:integer LENGTH 5 } on <s> in { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatypeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatypeLength_fail-wrongDatatype> a sht:ValidationFailure ;
    mf:name "1datatypeLength_fail-wrongDatatype" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S> { <p1> xs:integer LENGTH 5 } on <s> in { <s> <p1> 1.234 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatypeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1.345.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatypeLength_fail-short> a sht:ValidationFailure ;
    mf:name "1datatypeLength_fail-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S> { <p1> xs:integer LENGTH 5 } on <s> in { <s> <p1> 1234 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatypeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT1234.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1datatypeLength_pass> a sht:ValidationTest ;
    mf:name "1datatypeLength_pass" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S> { <p1> xs:integer LENGTH 5 } on <s> in { <s> <p1> 12345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatypeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1datatypeLength_pass.val>
    .

<#1datatypeLength_fail-long> a sht:ValidationFailure ;
    mf:name "1datatypeLength_fail-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S> { <p1> xs:integer LENGTH 5 } on <s> in { <s> <p1> 123456 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1datatypeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT123456.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

###   } length
###   fractionDigits {

<#1literalFractiondigits_fail-decimal-short> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-decimal-short" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> 1.2345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_2345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

 # for # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
 # <#1literalFractiondigitsxsd-integer_fail-decimal-short> a sht:ValidationFailure ;
 #     mf:name "1literalFractiondigitsxsd-integer_fail-decimal-short" ;
 #     rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> 1.2345 }" ;
 #     mf:status mf:proposed ;
 #     mf:action [
 #       sht:schema <../schemas/1literalFractiondigitsxsd-integer.shex> ;
 #       sht:shape <http://a.example/S1> ;
 #       sht:data <Is1_Ip1_DEC1_2345.ttl> ;
 #       sht:focus <http://a.example/s1>
 #     ] ;
 #     .

<#1literalFractiondigits_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1literalFractiondigits_pass-decimal-equal" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> 1.23456 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_23456.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalFractiondigits_pass-decimal-equal.val>
    .

 # # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
 # <#1literalFractiondigitsxsd-integer_pass-decimal-equal> a sht:ValidationTest ;
 #     mf:name "1literalFractiondigitsxsd-integer_pass-decimal-equal" ;
 #     rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } / { <s1> <p1> 1.23456 }" ;
 #     mf:status mf:proposed ;
 #     mf:action [
 #       sht:schema <../schemas/1literalFractiondigitsxsd-integer.shex> ;
 #       sht:shape <http://a.example/S1> ;
 #       sht:data <Is1_Ip1_DEC1_23456.ttl> ;
 #       sht:focus <http://a.example/s1>
 #     ] ;
 #     mf:result <1literalFractiondigits_pass-decimal-equal.val>
 #     .

<#1literalFractiondigits_pass-float-equal> a sht:ValidationTest ;
    mf:name "1literalFractiondigits_pass-float-equal" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> \"1.23456\"^^xsd:floag }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT1_23456.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalFractiondigits_pass-float-equal.val>
    .

<#1literalFractiondigits_fail-decimal-long> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-decimal-long" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> 1.234567 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_234567.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-integer-short> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-integer-short" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> 12345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-xsd_integer-short> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-xsd_integer-short" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> \"12345\"^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_xsd-integer12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-malformedxsd_decimal-1_23ab> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-malformedxsd_decimal-1_23ab" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> \"1.23ab\"^^xsd:decimal }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-decimal1_23ab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-malformedxsd_decimal-1_2345ab> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-malformedxsd_decimal-1_2345ab" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> \"1.2345ab\"^^xsd:decimal }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-decimal1_2345ab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-malformedxsd_integer-1_2345> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-malformedxsd_integer-1_2345" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / { <s1> <p1> \"1.2345\"^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-integer1_2345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-iri> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-iri" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / BASE <http://a.example/> { <s1> <p1> <1.2345> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <BASE_Is1_Ip1_I12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalFractiondigits_fail-bnode> a sht:ValidationFailure ;
    mf:name "1literalFractiondigits_fail-bnode" ;
    sht:trait sht:FractionDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL FRACTIONDIGITS 5 } / BASE <http://a.example/> { <s1> <p1> _:12345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalFractiondigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_B12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

###   } fractionDigits
###   totalDigits {

<#1literalTotaldigits_fail-decimal-short> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-decimal-short" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> 1.2345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_234.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

 # for # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
 # <#1literalTotaldigitsxsd-integer_fail-decimal-short> a sht:ValidationFailure ;
 #     mf:name "1literalTotaldigitsxsd-integer_fail-decimal-short" ;
 #     rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> 1.234 }" ;
 #     mf:status mf:proposed ;
 #     mf:action [
 #       sht:schema <../schemas/1literalTotaldigitsxsd-integer.shex> ;
 #       sht:shape <http://a.example/S1> ;
 #       sht:data <Is1_Ip1_DEC1_234.ttl> ;
 #       sht:focus <http://a.example/s1>
 #     ] ;
 #     .

<#1literalTotaldigits_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1literalTotaldigits_pass-decimal-equal" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> 1.2345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_2345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalTotaldigits_pass-decimal-equal.val>
    .

 # # for numericFacet ::= (numericFacet | numericLength) INTEGER (numericLiteral | string '^^' datatype )
 # <#1literalTotaldigitsxsd-integer_pass-decimal-equal> a sht:ValidationTest ;
 #     mf:name "1literalTotaldigitsxsd-integer_pass-decimal-equal" ;
 #     rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } / { <s1> <p1> 1.2345 }" ;
 #     mf:status mf:proposed ;
 #     mf:action [
 #       sht:schema <../schemas/1literalTotaldigitsxsd-integer.shex> ;
 #       sht:shape <http://a.example/S1> ;
 #       sht:data <Is1_Ip1_DEC1_2345.ttl> ;
 #       sht:focus <http://a.example/s1>
 #     ] ;
 #     mf:result <1literalTotaldigits_pass-decimal-equal.val>
 #     .

<#1literalTotaldigits_pass-float-equal> a sht:ValidationTest ;
    mf:name "1literalTotaldigits_pass-float-equal" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> \"1.2345\"^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT1_2345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalTotaldigits_pass-float-equal.val>
    .

<#1literalTotaldigits_fail-decimal-long> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-decimal-long" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> 1.23456 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC1_23456.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_pass-integer-equal> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_pass-integer-equal" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> 12345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalTotaldigits_pass-integer-equal.val>
    .

<#1literalTotaldigits_fail-xsd_integer-short> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-xsd_integer-short" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> \"1234\"^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_xsd-integer1234.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_fail-malformedxsd_decimal-1_23ab> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-malformedxsd_decimal-1_23ab" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> \"1.23ab\"^^xsd:decimal }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-decimal1_23ab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_fail-malformedxsd_decimal-1_2345ab> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-malformedxsd_decimal-1_2345ab" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> \"1.2345ab\"^^xsd:decimal }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-decimal1_2345ab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_fail-malformedxsd_integer-1_2345> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-malformedxsd_integer-1_2345" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / { <s1> <p1> \"1.2345\"^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_malformedxsd-integer1_2345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_fail-iri> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-iri" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / BASE <http://a.example/> { <s1> <p1> <1.2345> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <BASE_Is1_Ip1_I12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1literalTotaldigits_fail-bnode> a sht:ValidationFailure ;
    mf:name "1literalTotaldigits_fail-bnode" ;
    sht:trait sht:TotalDigitsFacet ;
    rdfs:comment "<S1> { <p1> LITERAL TOTALDIGITS 5 } / BASE <http://a.example/> { <s1> <p1> _:12345 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalTotaldigits.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_B12345.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

###   } totalDigits
###   comparators {
####     manual {

<#1floatMininclusiveINTEGER_fail-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveINTEGER_fail-low" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 5 } / { <s1> <p1> '4.9'^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_9.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveINTEGER_pass-equalLead> a sht:ValidationTest ;
    mf:name "1floatMininclusiveINTEGER_pass-equalLead" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 5 } / { <s1> <p1> '05'^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveINTEGER_pass-equalLead.val>
    .

<#1floatMininclusiveINTEGER_pass-equalTrail> a sht:ValidationTest ;
    mf:name "1floatMininclusiveINTEGER_pass-equalTrail" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 5 } / { <s1> <p1> '5.0'^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveINTEGER_pass-equalTrail.val>
    .

<#1floatMininclusiveINTEGER_pass-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveINTEGER_pass-high" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 5 } / { <s1> <p1> '5.1'^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveINTEGER_pass-high.val>
    .

<#1integerMininclusiveINTEGER_fail-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-low" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '4'^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_pass-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGER_pass-equalLead" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '05'^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGER_pass-equalLead.val>
    .

<#1integerMininclusiveINTEGER_pass-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGER_pass-equal" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '5'^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGER_pass-equal.val>
    .

<#1integerMininclusiveINTEGER_pass-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGER_pass-high" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '6'^^xsd:integer }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGER_pass-high.val>
    .

<#1floatMininclusiveINTEGERLead_pass-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusiveINTEGERLead_pass-equal" ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 5 } / { <s1> <p1> '5'^^xsd:float }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveINTEGER_pass-equal.val>
    .

####     } manual
####     generated {

<#1integerMininclusiveINTEGER_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGER_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGER_pass-integer-equal.val>
    .

<#1integerMininclusiveINTEGER_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGER_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGER_pass-integer-high.val>
    .

<#1integerMininclusiveINTEGERLead_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGERLead_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J7> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGERLead_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGERLead_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K7> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGERLead_pass-integer-equal.val>
    .

<#1integerMininclusiveINTEGERLead_pass-integer-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGERLead_pass-integer-equalLead" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.L7> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05 } / { <s1> <p1> 05 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGERLead_pass-integer-equalLead.val>
    .

<#1integerMininclusiveINTEGERLead_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveINTEGERLead_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N7> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveINTEGERLead_pass-integer-high.val>
    .

<#1integerMininclusiveDECIMAL_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMAL_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K8> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 4.5 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMAL_pass-integer-equal.val>
    .

<#1integerMininclusiveDECIMALLeadTrail_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveDECIMALLeadTrail_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J9> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveDECIMALLeadTrail_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALLeadTrail_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K9> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALLeadTrail_pass-integer-equal.val>
    .

<#1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.L9> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50 } / { <s1> <p1> 05 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead.val>
    .

<#1integerMininclusiveDECIMALLeadTrail_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALLeadTrail_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N9> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALLeadTrail_pass-integer-high.val>
    .

<#1integerMininclusiveDECIMALint_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveDECIMALint_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5.0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveDECIMALint_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALint_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5.0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALint_pass-integer-equal.val>
    .

<#1integerMininclusiveDECIMALint_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALint_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5.0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALint_pass-integer-high.val>
    .

<#1integerMininclusiveDECIMALintLeadTrail_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveDECIMALintLeadTrail_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J11> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K11> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal.val>
    .

<#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.L11> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00 } / { <s1> <p1> 05 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead.val>
    .

<#1integerMininclusiveDECIMALintLeadTrail_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDECIMALintLeadTrail_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N11> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDECIMALintLeadTrail_pass-integer-high.val>
    .

<#1integerMininclusiveDOUBLE_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLE_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K12> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 4.5e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLE_pass-integer-equal.val>
    .

<#1integerMininclusiveDOUBLELeadTrail_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveDOUBLELeadTrail_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J13> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50e0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveDOUBLELeadTrail_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLELeadTrail_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K13> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLELeadTrail_pass-integer-equal.val>
    .

<#1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.L13> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50e0 } / { <s1> <p1> 05 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead.val>
    .

<#1integerMininclusiveDOUBLELeadTrail_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLELeadTrail_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N13> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 04.50e0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLELeadTrail_pass-integer-high.val>
    .

<#1integerMininclusiveDOUBLEint_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLEint_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5.0e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLEint_pass-integer-equal.val>
    .

<#1integerMininclusiveDOUBLEintLeadTrail_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveDOUBLEintLeadTrail_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J15> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00e0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K15> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal.val>
    .

<#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.L15> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00e0 } / { <s1> <p1> 05 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT05.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead.val>
    .

<#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N15> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 05.00e0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high.val>
    .

<#1integerMininclusiveINTEGER_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K16> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K17> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K18> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_fail-dateTime-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-dateTime-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K19> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '2015-12-25T01:23:45Z'^^<http://www.w3.org/2001/XMLSchema#dateTime> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DT2015-12-25T01_23_45Z.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_fail-string-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-string-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K20> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> 'ab'^^<http://www.w3.org/2001/XMLSchema#string> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_STRab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusiveINTEGER_fail-byte-equal> a sht:ValidationFailure ;
    mf:name "1integerMininclusiveINTEGER_fail-byte-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K21> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE 5 } / { <s1> <p1> '5'^^<http://www.w3.org/2001/XMLSchema#byte> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_BYT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusivexsd-integer_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMininclusivexsd-integer_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J23> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusivexsd-integer.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMininclusivexsd-integer_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMininclusivexsd-integer_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K23> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MININCLUSIVE \"5\"^^<http://www.w3.org/2001/XMLSchema#integer> } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMininclusivexsd-integer.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMininclusivexsd-integer_pass-integer-equal.val>
    .

<#1decimalMininclusiveINTEGER_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveINTEGER_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveINTEGER_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveINTEGER_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveINTEGER_pass-decimal-high.val>
    .

<#1decimalMininclusiveINTEGERLead_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveINTEGERLead_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J28> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveINTEGERLead_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveINTEGERLead_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N28> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveINTEGERLead_pass-decimal-high.val>
    .

<#1decimalMininclusiveDECIMAL_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDECIMAL_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDECIMAL_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMAL_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMAL_pass-decimal-equal.val>
    .

<#1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> 04.50 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail.val>
    .

<#1decimalMininclusiveDECIMAL_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMAL_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMAL_pass-decimal-high.val>
    .

<#1decimalMininclusiveDECIMALLeadTrail_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDECIMALLeadTrail_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J30> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K30> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal.val>
    .

<#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M30> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50 } / { <s1> <p1> 04.50 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail.val>
    .

<#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N30> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high.val>
    .

<#1decimalMininclusiveDECIMALintLeadTrail_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDECIMALintLeadTrail_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J32> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05.00 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N32> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05.00 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high.val>
    .

<#1decimalMininclusiveDOUBLE_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDOUBLE_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDOUBLE_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLE_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5e0 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLE_pass-decimal-equal.val>
    .

<#1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5e0 } / { <s1> <p1> 04.50 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail.val>
    .

<#1decimalMininclusiveDOUBLELeadTrail_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDOUBLELeadTrail_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J34> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K34> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50e0 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal.val>
    .

<#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M34> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50e0 } / { <s1> <p1> 04.50 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail.val>
    .

<#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N34> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 04.50e0 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high.val>
    .

<#1decimalMininclusiveDOUBLEintLeadTrail_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDOUBLEintLeadTrail_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J36> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05.00e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N36> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 05.00e0 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high.val>
    .

<#1decimalMininclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K37> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1decimalMininclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K39> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE 4.5 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusivexsd-decimal_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMininclusivexsd-decimal_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J44> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusivexsd-decimal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMininclusivexsd-decimal_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMininclusivexsd-decimal_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K44> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MININCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMininclusivexsd-decimal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMininclusivexsd-decimal_pass-decimal-equal.val>
    .

<#1floatMininclusiveINTEGERLead_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveINTEGERLead_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J49> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveINTEGERLead_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveINTEGERLead_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N49> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveINTEGERLead_pass-float-high.val>
    .

<#1floatMininclusiveDECIMAL_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMAL_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 4.5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMAL_pass-float-equal.val>
    .

<#1floatMininclusiveDECIMAL_pass-float-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMAL_pass-float-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 4.5 } / { <s1> <p1> '04.50'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMAL_pass-float-equalLeadTrail.val>
    .

<#1floatMininclusiveDECIMALLeadTrail_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveDECIMALLeadTrail_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J51> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveDECIMALLeadTrail_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMALLeadTrail_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K51> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMALLeadTrail_pass-float-equal.val>
    .

<#1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M51> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50 } / { <s1> <p1> '04.50'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail.val>
    .

<#1floatMininclusiveDECIMALLeadTrail_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMALLeadTrail_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N51> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMALLeadTrail_pass-float-high.val>
    .

<#1floatMininclusiveDECIMALintLeadTrail_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveDECIMALintLeadTrail_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J53> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05.00 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveDECIMALintLeadTrail_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDECIMALintLeadTrail_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N53> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05.00 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDECIMALintLeadTrail_pass-float-high.val>
    .

<#1floatMininclusiveDOUBLE_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLE_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 4.5e0 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLE_pass-float-equal.val>
    .

<#1floatMininclusiveDOUBLE_pass-float-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLE_pass-float-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 4.5e0 } / { <s1> <p1> '04.50'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLE_pass-float-equalLeadTrail.val>
    .

<#1floatMininclusiveDOUBLELeadTrail_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveDOUBLELeadTrail_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J55> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50e0 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveDOUBLELeadTrail_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLELeadTrail_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K55> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50e0 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLELeadTrail_pass-float-equal.val>
    .

<#1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M55> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50e0 } / { <s1> <p1> '04.50'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT04_50.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail.val>
    .

<#1floatMininclusiveDOUBLELeadTrail_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLELeadTrail_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N55> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 04.50e0 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLELeadTrail_pass-float-high.val>
    .

<#1floatMininclusiveDOUBLEintLeadTrail_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusiveDOUBLEintLeadTrail_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J57> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05.00e0 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusiveDOUBLEintLeadTrail_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMininclusiveDOUBLEintLeadTrail_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N57> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE 05.00e0 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusiveDOUBLEintLeadTrail_pass-float-high.val>
    .

<#1floatMininclusivexsd-float_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMininclusivexsd-float_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J65> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMininclusivexsd-float_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMininclusivexsd-float_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K65> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MININCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMininclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMininclusivexsd-float_pass-float-equal.val>
    .

<#1doubleMininclusiveINTEGERLead_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusiveINTEGERLead_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J70> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusiveINTEGERLead_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveINTEGERLead_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N70> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveINTEGERLead_pass-double-high.val>
    .

<#1doubleMininclusiveDECIMAL_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMAL_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 4.5 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMAL_pass-double-equal.val>
    .

<#1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 4.5 } / { <s1> <p1> 04.50e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL04_50e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail.val>
    .

<#1doubleMininclusiveDECIMALLeadTrail_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusiveDECIMALLeadTrail_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J72> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusiveDECIMALLeadTrail_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMALLeadTrail_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K72> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMALLeadTrail_pass-double-equal.val>
    .

<#1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M72> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50 } / { <s1> <p1> 04.50e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL04_50e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail.val>
    .

<#1doubleMininclusiveDECIMALLeadTrail_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMALLeadTrail_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N72> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMALLeadTrail_pass-double-high.val>
    .

<#1doubleMininclusiveDECIMALintLeadTrail_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusiveDECIMALintLeadTrail_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J74> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05.00 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusiveDECIMALintLeadTrail_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDECIMALintLeadTrail_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N74> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05.00 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDECIMALintLeadTrail_pass-double-high.val>
    .

<#1doubleMininclusiveDOUBLE_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLE_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 4.5e0 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLE_pass-double-equal.val>
    .

<#1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 4.5e0 } / { <s1> <p1> 04.50e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL04_50e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail.val>
    .

<#1doubleMininclusiveDOUBLELeadTrail_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusiveDOUBLELeadTrail_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J76> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50e0 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusiveDOUBLELeadTrail_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLELeadTrail_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K76> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50e0 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLELeadTrail_pass-double-equal.val>
    .

<#1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.M76> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50e0 } / { <s1> <p1> 04.50e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL04_50e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail.val>
    .

<#1doubleMininclusiveDOUBLELeadTrail_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLELeadTrail_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N76> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 04.50e0 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLELeadTrail_pass-double-high.val>
    .

<#1doubleMininclusiveDOUBLEintLeadTrail_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusiveDOUBLEintLeadTrail_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J78> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05.00e0 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.N78> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE 05.00e0 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high.val>
    .

<#1doubleMininclusivexsd-double_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMininclusivexsd-double_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.J86> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE \"4.5e0\"^^<http://www.w3.org/2001/XMLSchema#double> } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusivexsd-double.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMininclusivexsd-double_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMininclusivexsd-double_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinInclusive.K86> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MININCLUSIVE \"4.5e0\"^^<http://www.w3.org/2001/XMLSchema#double> } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMininclusivexsd-double.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMininclusivexsd-double_pass-double-equal.val>
    .

<#1integerMinexclusiveINTEGER_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveINTEGER_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveINTEGER_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveINTEGER_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveINTEGER_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMinexclusiveINTEGER_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMinexclusiveINTEGER_pass-integer-high.val>
    .

<#1integerMinexclusiveDECIMALint_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveDECIMALint_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveDECIMALint_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveDECIMALint_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveDECIMALint_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMinexclusiveDECIMALint_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMinexclusiveDECIMALint_pass-integer-high.val>
    .

<#1integerMinexclusiveDOUBLEint_fail-integer-low> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveDOUBLEint_fail-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0e0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveDOUBLEint_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMinexclusiveDOUBLEint_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMinexclusiveDOUBLEint_pass-integer-high> a sht:ValidationTest ;
    mf:name "1integerMinexclusiveDOUBLEint_pass-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MINEXCLUSIVE 5.0e0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMinexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMinexclusiveDOUBLEint_pass-integer-high.val>
    .

<#1decimalMinexclusiveINTEGER_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveINTEGER_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveINTEGER_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMinexclusiveINTEGER_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMinexclusiveINTEGER_pass-decimal-high.val>
    .

<#1decimalMinexclusiveDECIMAL_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDECIMAL_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveDECIMAL_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDECIMAL_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveDECIMAL_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMinexclusiveDECIMAL_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMinexclusiveDECIMAL_pass-decimal-high.val>
    .

<#1decimalMinexclusiveDOUBLE_fail-decimal-low> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDOUBLE_fail-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveDOUBLE_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDOUBLE_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveDOUBLE_pass-decimal-high> a sht:ValidationTest ;
    mf:name "1decimalMinexclusiveDOUBLE_pass-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMinexclusiveDOUBLE_pass-decimal-high.val>
    .

<#1decimalMinexclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K37> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMinexclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1decimalMinexclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K39> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MINEXCLUSIVE 4.5 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveINTEGER_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMinexclusiveINTEGER_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveINTEGER_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMinexclusiveINTEGER_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMinexclusiveINTEGER_pass-float-high.val>
    .

<#1floatMinexclusiveDECIMAL_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMinexclusiveDECIMAL_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1floatMinexclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveDECIMAL_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMinexclusiveDECIMAL_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMinexclusiveDECIMAL_pass-float-high.val>
    .

<#1floatMinexclusiveDOUBLE_fail-float-low> a sht:ValidationFailure ;
    mf:name "1floatMinexclusiveDOUBLE_fail-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5e0 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveDOUBLE_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1floatMinexclusiveDOUBLE_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5e0 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusiveDOUBLE_pass-float-high> a sht:ValidationTest ;
    mf:name "1floatMinexclusiveDOUBLE_pass-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE 4.5e0 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMinexclusiveDOUBLE_pass-float-high.val>
    .

<#1floatMinexclusivexsd-float_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1floatMinexclusivexsd-float_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K58> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> 4.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMinexclusivexsd-float_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1floatMinexclusivexsd-float_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K60> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MINEXCLUSIVE \"4.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMinexclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveINTEGER_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveINTEGER_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveINTEGER_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMinexclusiveINTEGER_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMinexclusiveINTEGER_pass-double-high.val>
    .

<#1doubleMinexclusiveDECIMAL_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveDECIMAL_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveDECIMAL_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMinexclusiveDECIMAL_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMinexclusiveDECIMAL_pass-double-high.val>
    .

<#1doubleMinexclusiveDOUBLE_fail-double-low> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveDOUBLE_fail-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.J75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveDOUBLE_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveDOUBLE_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 4.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMinexclusiveDOUBLE_pass-double-high> a sht:ValidationTest ;
    mf:name "1doubleMinexclusiveDOUBLE_pass-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.N75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5e0 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMinexclusiveDOUBLE_pass-double-high.val>
    .

<#1doubleMinexclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1doubleMinexclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MinExclusive.K79> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MINEXCLUSIVE 4.5 } / { <s1> <p1> '4.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMinexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxinclusiveINTEGER_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveINTEGER_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveINTEGER_pass-integer-low.val>
    .

<#1integerMaxinclusiveINTEGER_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveINTEGER_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveINTEGER_pass-integer-equal.val>
    .

<#1integerMaxinclusiveINTEGER_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxinclusiveINTEGER_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxinclusiveDECIMALint_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveDECIMALint_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveDECIMALint_pass-integer-low.val>
    .

<#1integerMaxinclusiveDECIMALint_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveDECIMALint_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveDECIMALint_pass-integer-equal.val>
    .

<#1integerMaxinclusiveDECIMALint_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxinclusiveDECIMALint_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxinclusiveDOUBLEint_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveDOUBLEint_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0e0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveDOUBLEint_pass-integer-low.val>
    .

<#1integerMaxinclusiveDOUBLEint_pass-integer-equal> a sht:ValidationTest ;
    mf:name "1integerMaxinclusiveDOUBLEint_pass-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxinclusiveDOUBLEint_pass-integer-equal.val>
    .

<#1integerMaxinclusiveDOUBLEint_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxinclusiveDOUBLEint_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXINCLUSIVE 5.0e0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxinclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxinclusiveINTEGER_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxinclusiveINTEGER_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxinclusiveINTEGER_pass-decimal-low.val>
    .

<#1decimalMaxinclusiveINTEGER_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxinclusiveINTEGER_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxinclusiveDECIMAL_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxinclusiveDECIMAL_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxinclusiveDECIMAL_pass-decimal-low.val>
    .

<#1decimalMaxinclusiveDECIMAL_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMaxinclusiveDECIMAL_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5 } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxinclusiveDECIMAL_pass-decimal-equal.val>
    .

<#1decimalMaxinclusiveDECIMAL_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxinclusiveDECIMAL_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxinclusiveDOUBLE_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxinclusiveDOUBLE_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxinclusiveDOUBLE_pass-decimal-low.val>
    .

<#1decimalMaxinclusiveDOUBLE_pass-decimal-equal> a sht:ValidationTest ;
    mf:name "1decimalMaxinclusiveDOUBLE_pass-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxinclusiveDOUBLE_pass-decimal-equal.val>
    .

<#1decimalMaxinclusiveDOUBLE_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxinclusiveDOUBLE_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxinclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxinclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K37> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5 } / { <s1> <p1> '5.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxinclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxinclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K39> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXINCLUSIVE 5.5 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxinclusiveINTEGER_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxinclusiveINTEGER_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxinclusiveINTEGER_pass-float-low.val>
    .

<#1floatMaxinclusiveINTEGER_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxinclusiveINTEGER_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxinclusiveDECIMAL_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxinclusiveDECIMAL_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxinclusiveDECIMAL_pass-float-low.val>
    .

<#1floatMaxinclusiveDECIMAL_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMaxinclusiveDECIMAL_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5 } / { <s1> <p1> '5.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxinclusiveDECIMAL_pass-float-equal.val>
    .

<#1floatMaxinclusiveDECIMAL_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxinclusiveDECIMAL_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxinclusiveDOUBLE_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxinclusiveDOUBLE_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5e0 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxinclusiveDOUBLE_pass-float-low.val>
    .

<#1floatMaxinclusiveDOUBLE_pass-float-equal> a sht:ValidationTest ;
    mf:name "1floatMaxinclusiveDOUBLE_pass-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5e0 } / { <s1> <p1> '5.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxinclusiveDOUBLE_pass-float-equal.val>
    .

<#1floatMaxinclusiveDOUBLE_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxinclusiveDOUBLE_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE 5.5e0 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxinclusivexsd-float_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1floatMaxinclusivexsd-float_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K58> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE \"5.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxinclusivexsd-float_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1floatMaxinclusivexsd-float_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K60> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXINCLUSIVE \"5.5\"^^<http://www.w3.org/2001/XMLSchema#float> } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxinclusivexsd-float.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxinclusiveINTEGER_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxinclusiveINTEGER_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxinclusiveINTEGER_pass-double-low.val>
    .

<#1doubleMaxinclusiveINTEGER_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxinclusiveINTEGER_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxinclusiveDECIMAL_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxinclusiveDECIMAL_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxinclusiveDECIMAL_pass-double-low.val>
    .

<#1doubleMaxinclusiveDECIMAL_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMaxinclusiveDECIMAL_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxinclusiveDECIMAL_pass-double-equal.val>
    .

<#1doubleMaxinclusiveDECIMAL_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxinclusiveDECIMAL_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxinclusiveDOUBLE_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxinclusiveDOUBLE_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.J75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxinclusiveDOUBLE_pass-double-low.val>
    .

<#1doubleMaxinclusiveDOUBLE_pass-double-equal> a sht:ValidationTest ;
    mf:name "1doubleMaxinclusiveDOUBLE_pass-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxinclusiveDOUBLE_pass-double-equal.val>
    .

<#1doubleMaxinclusiveDOUBLE_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxinclusiveDOUBLE_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.N75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5e0 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxinclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxinclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxInclusive.K79> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXINCLUSIVE 5.5 } / { <s1> <p1> '5.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxinclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveINTEGER_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxexclusiveINTEGER_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxexclusiveINTEGER_pass-integer-low.val>
    .

<#1integerMaxexclusiveINTEGER_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveINTEGER_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveINTEGER_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveINTEGER_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N6> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveDECIMALint_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxexclusiveDECIMALint_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxexclusiveDECIMALint_pass-integer-low.val>
    .

<#1integerMaxexclusiveDECIMALint_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveDECIMALint_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveDECIMALint_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveDECIMALint_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N10> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveDOUBLEint_pass-integer-low> a sht:ValidationTest ;
    mf:name "1integerMaxexclusiveDOUBLEint_pass-integer-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0e0 } / { <s1> <p1> 4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1integerMaxexclusiveDOUBLEint_pass-integer-low.val>
    .

<#1integerMaxexclusiveDOUBLEint_fail-integer-equal> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveDOUBLEint_fail-integer-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0e0 } / { <s1> <p1> 5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1integerMaxexclusiveDOUBLEint_fail-integer-high> a sht:ValidationFailure ;
    mf:name "1integerMaxexclusiveDOUBLEint_fail-integer-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N14> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:integer MAXEXCLUSIVE 5.0e0 } / { <s1> <p1> 6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1integerMaxexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_INT6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveINTEGER_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxexclusiveINTEGER_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxexclusiveINTEGER_pass-decimal-low.val>
    .

<#1decimalMaxexclusiveINTEGER_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveINTEGER_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N27> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDECIMAL_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxexclusiveDECIMAL_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxexclusiveDECIMAL_pass-decimal-low.val>
    .

<#1decimalMaxexclusiveDECIMAL_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDECIMAL_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5 } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDECIMAL_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDECIMAL_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N29> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDOUBLE_pass-decimal-low> a sht:ValidationTest ;
    mf:name "1decimalMaxexclusiveDOUBLE_pass-decimal-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 4.4 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1decimalMaxexclusiveDOUBLE_pass-decimal-low.val>
    .

<#1decimalMaxexclusiveDOUBLE_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDOUBLE_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDOUBLE_fail-decimal-high> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDOUBLE_fail-decimal-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N33> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 5.6 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDECIMAL_fail-float-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDECIMAL_fail-float-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K37> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5 } / { <s1> <p1> '5.5'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K39> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5.5 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusivexsd-byte_fail-byte-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusivexsd-byte_fail-byte-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K43> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE 5 } / { <s1> <p1> '5'^^<http://www.w3.org/2001/XMLSchema#byte> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusivexsd-byte.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_BYT5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1decimalMaxexclusivexsd-decimal_fail-decimal-equal> a sht:ValidationFailure ;
    mf:name "1decimalMaxexclusivexsd-decimal_fail-decimal-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K44> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:decimal MAXEXCLUSIVE \"5.5\"^^<http://www.w3.org/2001/XMLSchema#decimal> } / { <s1> <p1> 5.5 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1decimalMaxexclusivexsd-decimal.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DEC5_5.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxexclusiveINTEGER_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxexclusiveINTEGER_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxexclusiveINTEGER_pass-float-low.val>
    .

<#1floatMaxexclusiveINTEGER_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxexclusiveINTEGER_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N48> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxexclusiveDECIMAL_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxexclusiveDECIMAL_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5.5 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxexclusiveDECIMAL_pass-float-low.val>
    .

<#1floatMaxexclusiveDECIMAL_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxexclusiveDECIMAL_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N50> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5.5 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1floatMaxexclusiveDOUBLE_pass-float-low> a sht:ValidationTest ;
    mf:name "1floatMaxexclusiveDOUBLE_pass-float-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> '4.4'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT4_4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1floatMaxexclusiveDOUBLE_pass-float-low.val>
    .

<#1floatMaxexclusiveDOUBLE_fail-float-high> a sht:ValidationFailure ;
    mf:name "1floatMaxexclusiveDOUBLE_fail-float-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N54> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:float MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> '5.6'^^<http://www.w3.org/2001/XMLSchema#float> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1floatMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_FLT5_6.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveINTEGER_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxexclusiveINTEGER_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxexclusiveINTEGER_pass-double-low.val>
    .

<#1doubleMaxexclusiveINTEGER_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveINTEGER_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveINTEGER_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveINTEGER_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N69> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveINTEGER.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveINTEGERLead_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveINTEGERLead_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K70> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 05 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveINTEGERLead.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDECIMAL_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxexclusiveDECIMAL_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxexclusiveDECIMAL_pass-double-low.val>
    .

<#1doubleMaxexclusiveDECIMAL_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDECIMAL_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDECIMAL_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDECIMAL_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N71> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMAL.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDECIMALLeadTrail_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDECIMALLeadTrail_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K72> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 05.50 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMALLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDECIMALint_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDECIMALint_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K73> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMALint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDECIMALintLeadTrail_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDECIMALintLeadTrail_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K74> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 05.00 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDECIMALintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDOUBLE_pass-double-low> a sht:ValidationTest ;
    mf:name "1doubleMaxexclusiveDOUBLE_pass-double-low" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.J75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 4.4e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL4_4e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1doubleMaxexclusiveDOUBLE_pass-double-low.val>
    .

<#1doubleMaxexclusiveDOUBLE_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDOUBLE_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDOUBLE_fail-double-high> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDOUBLE_fail-double-high" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.N75> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.5e0 } / { <s1> <p1> 5.6e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLE.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_6e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDOUBLELeadTrail_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDOUBLELeadTrail_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K76> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 05.50e0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLELeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDOUBLEint_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDOUBLEint_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K77> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 5.0e0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLEint.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1doubleMaxexclusiveDOUBLEintLeadTrail_fail-double-equal> a sht:ValidationFailure ;
    mf:name "1doubleMaxexclusiveDOUBLEintLeadTrail_fail-double-equal" ;
    prov:wasDerivedFrom <facet-tests-data.xlsx#MaxExclusive.K78> ;
    sht:trait sht:ComparatorFacet ;
    rdfs:comment "<S1> { <p1> xsd:double MAXEXCLUSIVE 05.00e0 } / { <s1> <p1> 5.5e0 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1doubleMaxexclusiveDOUBLEintLeadTrail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_DBL5_5e0.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

####     } generated
###   } comparators
###   lengths {
<#1literalLength_fail-lit-short> a sht:ValidationFailure ;
    mf:name "1literalLength_fail-lit-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL LENGTH 5 } on { <s1> <p1> \"abcd\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literalLength_pass-lit-equal> a sht:ValidationTest ;
    mf:name "1literalLength_pass-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL LENGTH 5 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalLength_pass-lit-equal.val>
    .

<#1literalLength_fail-lit-long> a sht:ValidationFailure ;
    mf:name "1literalLength_fail-lit-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL LENGTH 5 } on { <s1> <p1> \"abcdef\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literalLength_fail-iri-equal> a sht:ValidationFailure ;
    mf:name "1literalLength_fail-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL LENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalLength19.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literalLength_fail-bnode-equal> a sht:ValidationFailure ;
    mf:name "1literalLength_fail-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL LENGTH 5 } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1iriLength_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1iriLength_fail-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI LENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriLength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1iriLength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI LENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriLength_pass-iri-equal.val>
    .

<#1iriLength_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1iriLength_fail-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI LENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriLength_fail-lit-equal> a sht:ValidationFailure ;
    mf:name "1iriLength_fail-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI LENGTH 19 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriLength_fail-bnode-equal> a sht:ValidationFailure ;
    mf:name "1iriLength_fail-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI LENGTH 19 } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1iriRefLength1_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1iriRefLength1_fail-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI @<S2> LENGTH 19 } <S2> { <p2> . } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRefLength1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriRefLength1_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1iriRefLength1_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI @<S2> LENGTH 19 } <S2> { <p2> . } on { <s1> <p1> <http://a.example/o1> . <http://a.example/o1> <p2>  <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRefLength1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1-Io1_Ip2_Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriRefLength1_pass-iri-equal.val>
    .

<#1iriRefLength1_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1iriRefLength1_fail-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI @<S2> LENGTH 19 } <S2> { <p2> . } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRefLength1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriRefLength1_fail-lit-equal> a sht:ValidationFailure ;
    mf:name "1iriRefLength1_fail-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI @<S2> LENGTH 19 } <S2> { <p2> . } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRefLength1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriRefLength1_fail-bnode-equal> a sht:ValidationFailure ;
    mf:name "1iriRefLength1_fail-bnode-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI @<S2> LENGTH 19 } <S2> { <p2> . } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriRefLength1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1bnodeLength_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1bnodeLength_fail-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE LENGTH 5 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnodeLength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1bnodeLength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE LENGTH 5 } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodeLength_pass-bnode-equal.val>
    .

<#1bnodeLength_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1bnodeLength_fail-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE LENGTH 5 } on { <s1> <p1> _:abcdef }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnodeLength_fail-lit-equal> a sht:ValidationFailure ;
    mf:name "1bnodeLength_fail-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE LENGTH 19 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnodeLength_fail-iri-equal> a sht:ValidationFailure ;
    mf:name "1bnodeLength_fail-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE LENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1nonliteralLength_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1nonliteralLength_fail-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralLength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1nonliteralLength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGT19 2 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralLength_pass-iri-equal.val>
    .

<#1nonliteralLength_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1nonliteralLength_fail-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralLength_fail-lit-equal> a sht:ValidationFailure ;
    mf:name "1nonliteralLength_fail-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralLength_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1nonliteralLength_fail-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralLength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1nonliteralLength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> _:abcdefghijklmnopqrs }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrs.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralLength_pass-bnode-equal.val>
    .

<#1nonliteralLength_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1nonliteralLength_fail-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL LENGTH 19 } on { <s1> <p1> _:abcdefghijklmnopqrst }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralLength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrst.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .



<#1literalMinlength_fail-lit-short> a sht:ValidationFailure ;
    mf:name "1literalMinlength_fail-lit-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MINLENGTH 5 } on { <s1> <p1> \"abcd\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1literalMinlength_pass-lit-equal> a sht:ValidationTest ;
    mf:name "1literalMinlength_pass-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MINLENGTH 5 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalMinlength_pass-lit-equal.val>
    .

<#1literalMinlength_pass-lit-long> a sht:ValidationTest ;
    mf:name "1literalMinlength_pass-lit-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MINLENGTH 5 } on { <s1> <p1> \"abcdef\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalMinlength_pass-lit-long.val>
    .


<#1iriMinlength_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1iriMinlength_fail-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MINLENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1iriMinlength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1iriMinlength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MINLENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriMinlength_pass-iri-equal.val>
    .

<#1iriMinlength_pass-iri-long> a sht:ValidationTest ;
    mf:name "1iriMinlength_pass-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MINLENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriMinlength_pass-iri-long.val>
    .


<#1bnodeMinlength_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1bnodeMinlength_fail-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MINLENGTH 5 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1bnodeMinlength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1bnodeMinlength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MINLENGTH 5 } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodeMinlength_pass-bnode-equal.val>
    .

<#1bnodeMinlength_pass-bnode-long> a sht:ValidationTest ;
    mf:name "1bnodeMinlength_pass-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MINLENGTH 5 } on { <s1> <p1> _:abcdef }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodeMinlength_pass-bnode-long.val>
    .


<#1nonliteralMinlength_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1nonliteralMinlength_fail-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralMinlength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1nonliteralMinlength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMinlength_pass-iri-equal.val>
    .

<#1nonliteralMinlength_pass-iri-long> a sht:ValidationTest ;
    mf:name "1nonliteralMinlength_pass-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMinlength_pass-iri-long.val>
    .

<#1nonliteralMinlength_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1nonliteralMinlength_fail-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralMinlength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1nonliteralMinlength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> _:abcdefghijklmnopqrs }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrs.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMinlength_pass-bnode-equal.val>
    .

<#1nonliteralMinlength_pass-bnode-long> a sht:ValidationTest ;
    mf:name "1nonliteralMinlength_pass-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MINLENGTH 19 } on { <s1> <p1> _:abcdefghijklmnopqrst }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMinlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrs.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMinlength_pass-bnode-long.val>
    .



<#1literalMaxlength_pass-lit-short> a sht:ValidationTest ;
    mf:name "1literalMaxlength_pass-lit-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MAXLENGTH 5 } on { <s1> <p1> \"abcd\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalMaxlength_pass-lit-short.val>
    .

<#1literalMaxlength_pass-lit-equal> a sht:ValidationTest ;
    mf:name "1literalMaxlength_pass-lit-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MAXLENGTH 5 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalMaxlength_pass-lit-equal.val>
    .

<#1literalMaxlength_fail-lit-long> a sht:ValidationFailure ;
    mf:name "1literalMaxlength_fail-lit-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> LITERAL MAXLENGTH 5 } on { <s1> <p1> \"abcdef\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1iriMaxlength_pass-iri-short> a sht:ValidationTest ;
    mf:name "1iriMaxlength_pass-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriMaxlength_pass-iri-short.val>
    .

<#1iriMaxlength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1iriMaxlength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriMaxlength_pass-iri-equal.val>
    .

<#1iriMaxlength_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1iriMaxlength_fail-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> IRI MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1bnodeMaxlength_pass-bnode-short> a sht:ValidationTest ;
    mf:name "1bnodeMaxlength_pass-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MAXLENGTH 5 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodeMaxlength_pass-bnode-short.val>
    .

<#1bnodeMaxlength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1bnodeMaxlength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MAXLENGTH 5 } on { <s1> <p1> _:abcde }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodeMaxlength_pass-bnode-equal.val>
    .

<#1bnodeMaxlength_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1bnodeMaxlength_fail-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> BNODE MAXLENGTH 5 } on { <s1> <p1> _:abcdef }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodeMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


<#1nonliteralMaxlength_pass-iri-short> a sht:ValidationTest ;
    mf:name "1nonliteralMaxlength_pass-iri-short" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMaxlength_pass-iri-short.val>
    .

<#1nonliteralMaxlength_pass-iri-equal> a sht:ValidationTest ;
    mf:name "1nonliteralMaxlength_pass-iri-equal" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMaxlength_pass-iri-equal.val>
    .

<#1nonliteralMaxlength_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1nonliteralMaxlength_fail-iri-long" ;
    sht:trait sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 19 } on { <s1> <p1> <http://a.example/o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1nonliteralMaxlength_pass-bnode-short> a sht:ValidationTest ;
    mf:name "1nonliteralMaxlength_pass-bnode-short" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 19 } on { <s1> <p1> _:abcd }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMaxlength_pass-bnode-short.val>
    .

<#1nonliteralMaxlength_pass-bnode-equal> a sht:ValidationTest ;
    mf:name "1nonliteralMaxlength_pass-bnode-equal" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 19 } on { <s1> <p1> _:abcdefghijklmnopqrs }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrs.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralMaxlength_pass-bnode-equal.val>
    .

<#1nonliteralMaxlength_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1nonliteralMaxlength_fail-bnode-long" ;
    sht:trait sht:LexicalBnode , sht:LengthFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL MAXLENGTH 5 } on { <s1> <p1> _:abcdefghijklmnopqrst }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralMaxlength.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babcdefghijklmnopqrst.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

###   } lengths
###   pattern {

<#1literalPattern_pass-lit-match> a sht:ValidationTest ;
    mf:name "1literalPattern_pass-lit-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"^ab$\"} on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1literalPattern_fail-lit-match.val>
    .

<#1literalPattern_fail-lit-short> a sht:ValidationFailure ;
    mf:name "1literalPattern_fail-lit-short" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"^ab$\" } on { <s1> <p1> \"a\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1literalPattern_fail-lit-long> a sht:ValidationFailure ;
    mf:name "1literalPattern_fail-lit-long" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"^ab$\" } on { <s1> <p1> \"abc\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labc.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1literalPattern19_fail-iri-match> a sht:ValidationFailure ;
    mf:name "1literalPattern19_fail-iri-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"^http://a.example/o1$\" } on { <s1> <p1> <http://a.example/o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPattern19.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1literalPattern_fail-bnode-match> a sht:ValidationFailure ;
    mf:name "1literalPattern_fail-bnode-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"^ab$\" } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1literalPatternabEnd_fail-bnode-match> a sht:ValidationFailure ;
    mf:name "1literalPatternabEnd_fail-bnode-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> LITERAL PATTERN \"ab$\" } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1literalPatternabEnd.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1iriPattern_pass-iri-match> a sht:ValidationTest ;
    mf:name "1iriPattern_pass-iri-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> IRI PATTERN \"^http://a.example/o1$\" } on { <s1> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1iriPattern_pass-iri-match.val>
    .

<#1iriPattern_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1iriPattern_fail-iri-short" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> IRI PATTERN \"^http://a.example/o1$\" } on { <s1> <p1> <o> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1iriPattern_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1iriPattern_fail-iri-long" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> IRI PATTERN \"^http://a.example/o1$\" } on { <s1> <p1> <o1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1a.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1iriPattern_fail-lit-match> a sht:ValidationFailure ;
    mf:name "1iriPattern_fail-lit-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> IRI PATTERN \"^http://a.example/o1$\" } on { <s1> <p1> \"o1\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_L19.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1iriPattern_fail-bnode-match> a sht:ValidationFailure ;
    mf:name "1iriPattern_fail-bnode-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> IRI PATTERN \"^ab$\" } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1iriPatternab.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1bnodePattern_pass-bnode-match> a sht:ValidationTest ;
    mf:name "1bnodePattern_pass-bnode-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> BNODE PATTERN \"^ab$\" } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodePattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1bnodePattern_pass-bnode-match.val>
    .

<#1bnodePattern_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1bnodePattern_fail-bnode-short" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> BNODE PATTERN \"^ab$\" } on { <s1> <p1> _:a }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodePattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Ba.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1bnodePattern_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1bnodePattern_fail-bnode-long" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> BNODE PATTERN \"^ab$\" } on { <s1> <p1> _:abc }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodePattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babc.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1bnodePattern_fail-lit-match> a sht:ValidationFailure ;
    mf:name "1bnodePattern_fail-lit-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> BNODE PATTERN \"^ab$\" } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodePattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1bnodePattern_fail-iri-match> a sht:ValidationFailure ; # try one against relative name
    mf:name "1bnodePattern_fail-iri-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> BNODE PATTERN \"^ab$\" } on { BASE <http://a.example/> <s1> <p1> <ab> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1bnodePattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <BASE_Is1_Ip1_Iab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1nonliteralPattern_pass-iri-match> a sht:ValidationTest ;
    mf:name "1nonliteralPattern_pass-iri-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> <ab> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralPattern_pass-iri-match.val>
    .

<#1nonliteralPattern_fail-iri-short> a sht:ValidationFailure ;
    mf:name "1nonliteralPattern_fail-iri-short" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> <a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Ia.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1nonliteralPattern_fail-iri-long> a sht:ValidationFailure ;
    mf:name "1nonliteralPattern_fail-iri-long" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> <abc> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iabc.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1nonliteralPattern_fail-lit-match> a sht:ValidationFailure ;
    mf:name "1nonliteralPattern_fail-lit-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> \"ab\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1nonliteralPattern_pass-bnode-match> a sht:ValidationTest ;
    mf:name "1nonliteralPattern_pass-bnode-match" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> _:ab }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Bab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1nonliteralPattern_pass-bnode-match.val>
    .

<#1nonliteralPattern_fail-bnode-short> a sht:ValidationFailure ;
    mf:name "1nonliteralPattern_fail-bnode-short" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> _:a }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Ba.ttl> ;
      sht:focus <http://a.example/s1>
    ].

<#1nonliteralPattern_fail-bnode-long> a sht:ValidationFailure ;
    mf:name "1nonliteralPattern_fail-bnode-long" ;
    sht:trait sht:PaternFacet ;
    rdfs:comment "<S1> { <p1> NONLITERAL PATTERN \"ab$\" } on { <s1> <p1> _:abc }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1nonliteralPattern.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Babc.ttl> ;
      sht:focus <http://a.example/s1>
    ].

###   } pattern
## } facets
## value sets {

<#1val1dotMinusiri3_pass> a sht:ValidationTest ;
    mf:name "1val1dotMinusiri3_pass" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>-<v2>-<v3>] } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1dotMinusiri3_pass.val>
    .

<#1val1dotMinusiri3_v1> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiri3_v1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>-<v2>-<v3>] } on { <s1> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiri3_v2> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiri3_v2" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>-<v2>-<v3>] } on { <s1> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiri3_v3> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiri3_v3" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>-<v2>-<v3>] } on { <s> <p1> <v3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv3.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1refvsMinusiri3_pass> a sht:ValidationTest ;
    mf:name "1val1refvsMinusiri3_pass" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "$<vs1> = [.-<v1>-<v2>-<v3>] <S> { <p1> $<vs1> } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1refvsMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1refvsMinusiri3_pass.val>
    .

<#1val1refvsMinusiri3_v1> a sht:ValidationFailure ;
    mf:name "1val1refvsMinusiri3_v1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "$<vs1> = [.-<v1>-<v2>-<v3>] <S> { <p1> $<vs1> } on { <s1> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1refvsMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1refvsMinusiri3_v2> a sht:ValidationFailure ;
    mf:name "1val1refvsMinusiri3_v2" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "$<vs1> = [.-<v1>-<v2>-<v3>] <S> { <p1> $<vs1> } on { <s1> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1refvsMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1refvsMinusiri3_v3> a sht:ValidationFailure ;
    mf:name "1val1refvsMinusiri3_v3" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "$<vs1> = [.-<v1>-<v2>-<v3>] <S> { <p1> $<vs1> } on { <s> <p1> <v3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1refvsMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv3.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiriStem3_pass> a sht:ValidationTest ;
    mf:name "1val1dotMinusiriStem3_pass" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>~-<v2>~-<v3>~] } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1dotMinusiriStem3_pass.val>
    .

<#1val1dotMinusiriStem3_v1> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiriStem3_v1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiriStem3_v2> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiriStem3_v2" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiriStem3_v3> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiriStem3_v3" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>~-<v2>~-<v3>~] } on { <s> <p1> <v3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv3.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1dotMinusiriStem3_v1a> a sht:ValidationFailure ;
    mf:name "1val1dotMinusiriStem3_v1a" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [.-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1dotMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStem_passv1> a sht:ValidationTest ;
    mf:name "1val1iriStem_passv1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v1>~] } on { <s> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStem.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStem_passv1.val>
    .

<#1val1iriStem_passv1a> a sht:ValidationTest ;
    mf:name "1val1iriStem_passv1a" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v1>~] } on { <s> <p1> <v1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStem.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStem_passv1a.val>
    .

<#1val1iriStem_fail> a sht:ValidationFailure ;
    mf:name "1val1iriStem_fail" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v1>~] } on { <s1> <p1> <> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStem.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_I.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiri3_passIv> a sht:ValidationTest ;
    mf:name "1val1iriStemMinusiri3_passIv" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s> <p1> <v> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStemMinusiri3_passIv.val>
    .

<#1val1iriStemMinusiri3_passIv4> a sht:ValidationTest ;
    mf:name "1val1iriStemMinusiri3_passIv4" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s> <p1> <v4> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStemMinusiri3_passIv4.val>
    .

<#1val1iriStemMinusiri3_v1> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiri3_v1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s1> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiri3_v2> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiri3_v2" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s1> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiri3_v3> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiri3_v3" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s> <p1> <v3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv3.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiri3_passIv1a> a sht:ValidationTest ;
    mf:name "1val1iriStemMinusiri3_passIv1a" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>-<v1>-<v2>-<v3>] } on { <s> <p1> <v1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiri3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStemMinusiri3_passIv1a.val>
    .

<#1val1iriStemMinusiriStem3_passIv> a sht:ValidationTest ;
    mf:name "1val1iriStemMinusiriStem3_passIv" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s> <p1> <v> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStemMinusiriStem3_passIv.val>
    .

<#1val1iriStemMinusiriStem3_passIv4> a sht:ValidationTest ;
    mf:name "1val1iriStemMinusiriStem3_passIv4" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s> <p1> <v4> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv4.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1iriStemMinusiriStem3_passIv4.val>
    .

<#1val1iriStemMinusiriStem3_v1> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiriStem3_v1" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiriStem3_v2> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiriStem3_v2" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiriStem3_v3> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiriStem3_v3" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s> <p1> <v3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv3.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1iriStemMinusiriStem3_v1a> a sht:ValidationFailure ;
    mf:name "1val1iriStemMinusiriStem3_v1a" ;
    sht:trait sht:ValueSet ;
    rdfs:comment "<S> { <p1> [<v>~-<v1>~-<v2>~-<v3>~] } on { <s1> <p1> <v1a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1iriStemMinusiriStem3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Iv1a.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

## } value sets
## triple expressions {
###   AND tripleExpr {
 # !../schemas/2dot.shex
 # !../schemas/2dotCommas.shex          [2dotCommas.shex]
 # !../schemas/open2dotclose.shex       [2dotCommas.shex]
 # !../schemas/open2dotcommasclose.shex [2dotCommas.shex]
 # !../schemas/3groupdot.shex
 # !../schemas/open3groupdotclose.shex [3groupdot.shex]

###   } AND tripleExpr
###   OR tripleExpr {

 # !../schemas/1dotOr1dot.shex
 # !../schemas/1dotCommaOr1dotComma.shex
 # !../schemas/open1dotOr1dotclose.shex                [1dotCommaOr1dotComma.shex]
 # !../schemas/open1dotCommaOr1dotCommacloseComma.shex [1dotCommaOr1dotComma.shex]
 # !../schemas/2dotOr1dot.shex
 # !../schemas/2dotCommaOr1dotComma.shex                    [2dotOr1dot.shex]
 # !../schemas/open2dotOr1dotclose.shex                     [2dotOr1dot.shex]
 # !../schemas/open2dotCommasOr1dotCommaclose.shex          [2dotOr1dot.shex]
 # !../schemas/openopen2dotcloseOr1dotclose.shex            [2dotOr1dot.shex]
 # !../schemas/openopen2dotCommascloseOr1dotCommaclose.shex [2dotOr1dot.shex]
 # !../schemas/open1dotopen1dotOr1dotcloseclose.shex
 # !../schemas/open1dotopen1dotCommaOr1dotCommacloseCommacloseComma.shex [open1dotopen1dotOr1dotcloseclose.shex]

<#1dotOr2dot_pass_p1> a sht:ValidationTest ;
    mf:name "1dotOr2dot_pass_p1" ;
    sht:trait sht:SomeOf , sht:EachOf-unvisited ;
    rdfs:comment ":S1 {:p1 .|:p2 .,:p3 .} / { :s1 :p1 \"p1-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotOr2dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <open1dotOropen2dotcloseclose_pass_p1.val>
    .

<#1dotOr2dot_pass_p2p3> a sht:ValidationTest ;
    mf:name "1dotOr2dot_pass_p2p3" ;
    sht:trait sht:SomeOf , sht:EachOf ;
    rdfs:comment ":S1 {:p1 .|:p2 .,:p3 .} / { :s1 :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotOr2dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p2p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <1dotOr2dot_pass_p2p3.val>
    .

<#1dotOr2dot-oneOf_fail_p1p2p3> a sht:ValidationFailure ;
    mf:name "1dotOr2dot-oneOf_fail_p1p2p3" ;
    sht:trait sht:OneOf , sht:EachOf-unvisited ;
    rdfs:comment ":S1 {:p1 .|:p2 .,:p3 .} / { :s1 :p1 \"p1-0\"; :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotOr2dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2p3.ttl> ;
      sht:focus <x>
    ] ;
    .

<#1dotOr2dot-someOf_pass_p1p2p3> a sht:ValidationTest ;
    mf:name "1dotOr2dot-someOf_pass_p1p2p3" ;
    sht:trait sht:SomeOf , sht:EachOf ;
    rdfs:comment ":S1 {:p1 .|:p2 .,:p3 .} / { :s1 :p1 \"p1-0\"; :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotOr2dot.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <1dotOr2dot-someOf_pass_p2p3.val> ;
    .

<#open1dotOropen2dotcloseclose_pass_p1> a sht:ValidationTest ;
    mf:name "open1dotOropen2dotcloseclose_pass_p1" ;
    sht:trait sht:SomeOf  , sht:EachOf-unvisited ;
    rdfs:comment ":S1 {(:p1 .|(:p2 .,:p3 .))} / { :s1 :p1 \"p1-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/open1dotOropen2dotcloseclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <open1dotOropen2dotcloseclose_pass_p1.val>
    .

<#open1dotOropen2dotcloseclose_pass_p2p3> a sht:ValidationTest ;
    mf:name "open1dotOropen2dotcloseclose_pass_p2p3" ;
    sht:trait sht:SomeOf , sht:EachOf ;
    rdfs:comment ":S1 {(:p1 .|(:p2 .,:p3 .))} / { :s1 :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/open1dotOropen2dotcloseclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p2p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <1dotOr2dot_pass_p2p3.val>
    .

<#open1dotOropen2dotcloseclose_fail_p1p2p3> a sht:ValidationFailure ;
    mf:name "open1dotOropen2dotcloseclose_fail_p1p2p3" ;
    sht:trait sht:OneOf  , sht:EachOf-unvisited ;
    rdfs:comment ":S1 {(:p1 .|(:p2 .,:p3 .))} / { :s1 :p1 \"p1-0\"; :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/open1dotOropen2dotcloseclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2p3.ttl> ;
      sht:focus <x>
    ] ;
    .

<#openopen1dotOr1dotclose1dotclose_pass_p1p3> a sht:ValidationTest ;
    mf:name "openopen1dotOr1dotclose1dotclose_pass_p1p3" ;
    sht:trait sht:SomeOf , sht:EachOf ;
    rdfs:comment ":S1 { ((:p1 .| :p2 .), :p3 .) } / { <x> :p1 \"p1-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/openopen1dotOr1dotclose1dotclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <openopen1dotOr1dotclose1dotclose_pass_p1p3.val>
    .

<#openopen1dotOr1dotclose1dotclose_pass_p2p3> a sht:ValidationTest ;
    mf:name "openopen1dotOr1dotclose1dotclose_pass_p2p3" ;
    sht:trait sht:SomeOf , sht:EachOf ;
    rdfs:comment ":S1 { ((:p1 .| :p2 .), :p3 .) } / { <x> :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/openopen1dotOr1dotclose1dotclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p2p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <openopen1dotOr1dotclose1dotclose_pass_p2p3.val>
    .


<#openopen1dotOr1dotclose1dotclose_fail_p1> a sht:ValidationFailure ;
    mf:name "openopen1dotOr1dotclose1dotclose_fail_p1" ;
    sht:trait sht:SomeOf  , sht:EachOf-unvisited ;
    rdfs:comment ":S1 { ((:p1 .| :p2 .), :p3 .) } / { <x> :p1 \"p1-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/openopen1dotOr1dotclose1dotclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1.ttl> ;
      sht:focus <x>
    ] ;
    .

<#openopen1dotOr1dotclose1dotclose_fail_p3> a sht:ValidationFailure ;
    mf:name "openopen1dotOr1dotclose1dotclose_fail_p3" ;
    sht:trait sht:SomeOf  , sht:EachOf ;
    rdfs:comment ":S1 { ((:p1 .| :p2 .), :p3 .) } / { <x> :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/openopen1dotOr1dotclose1dotclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p3.ttl> ;
      sht:focus <x>
    ] ;
    .

<#openopen1dotOr1dotclose1dotclose_fail_p1p2> a sht:ValidationFailure ;
    mf:name "openopen1dotOr1dotclose1dotclose_fail_p1p2" ;
    sht:trait sht:SomeOf  , sht:EachOf ;
    rdfs:comment ":S1 { ((:p1 .| :p2 .), :p3 .) } / { <x> :p1 \"p1-0\"; :p2 \"p2-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/openopen1dotOr1dotclose1dotclose.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2.ttl> ;
      sht:focus <x>
    ] ;
    .

###   } OR tripleExpr
## } triple expressions
## value expressions {
###   value reference {

<#1val1vExprRefIRIREF1_fail-lit-short> a sht:ValidationFailure ;
    mf:name "1val1vExprRefIRIREF1_fail-lit-short" ;
    sht:trait sht:ValueReference , sht:LengthFacet ;
    rdfs:comment "$<vc1> = LITERAL MINLENGTH 5 <S1> { <p1> $<vc1> } on { <s1> <p1> \"abcd\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefIRIREF1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1val1vExprRefIRIREF1_pass-lit-equal> a sht:ValidationTest ;
    mf:name "1val1vExprRefIRIREF1_pass-lit-equal" ;
    sht:trait sht:ValueReference , sht:LengthFacet ;
    rdfs:comment "$<vc1> = LITERAL MINLENGTH 5 <S1> { <p1> $<vc1> } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefIRIREF1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefIRIREF1_pass-lit-equal.val>
    .

<#1val1vExprRefbnode1_fail-lit-short> a sht:ValidationFailure ;
    mf:name "1val1vExprRefbnode1_fail-lit-short" ;
    sht:trait sht:ValueReference , sht:LengthFacet ;
    rdfs:comment "$_:vc1 = LITERAL MINLENGTH 5 <S1> { <p1> $_:vc1 } on { <s1> <p1> \"abcd\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefbnode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcd.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1val1vExprRefbnode1_pass-lit-equal> a sht:ValidationTest ;
    mf:name "1val1vExprRefbnode1_pass-lit-equal" ;
    sht:trait sht:ValueReference , sht:LengthFacet ;
    rdfs:comment "$_:vc1 = LITERAL MINLENGTH 5 <S1> { <p1> $_:vc1 } on { <s1> <p1> \"abcde\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefbnode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcde.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefbnode1_pass-lit-equal.val>
    .

###   } value reference
###   AND valueExpr {

<#1dotRefAnd3_failAll> a sht:ValidationFailure ;
    mf:name "1dotRefAnd3_failAll" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> AND @<S3> AND @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <n1> <p1> <n2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefAnd3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    .

<#1dotRefAnd3_failShape2Shape3> a sht:ValidationFailure ;
    mf:name "1dotRefAnd3_failShape2Shape3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> AND @<S3> AND @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n2> . <n2> <p2> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefAnd3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRefAnd3_failShape1Shape3> a sht:ValidationFailure ;
    mf:name "1dotRefAnd3_failShape1Shape3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> AND @<S3> AND @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n3> . <n3> <p3> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefAnd3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In3.In3_Ip3_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRefAnd3_failShape1Shape2> a sht:ValidationFailure ;
    mf:name "1dotRefAnd3_failShape1Shape2" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> AND @<S3> AND @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n4> . <n4> <p4> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefAnd3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In4.In4_Ip4_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ]
    .

<#1dotRefAnd3_passShape1Shape2Shape3> a sht:ValidationTest ;
    mf:name "1dotRefAnd3_passShape1Shape2Shape3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> AND @<S3> AND @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <s2>, <s3>, <s4> . <s2> <p2> \"X\" . <s3> <p3> \"X\" . <s4> <p4> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefAnd3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ipx_LXX3.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRefAnd3_passShape1Shape2Shape3.val>
    .

<#1val1vExprANDRef3_pass> a sht:ValidationTest ;
    mf:name "1val1vExprANDRef3_pass" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'abab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprANDRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprANDRef3_pass.val>
    .

<#1val1vExprANDRef3_failvc1> a sht:ValidationFailure ;
    mf:name "1val1vExprANDRef3_failvc1" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprANDRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprANDRef3_failvc2> a sht:ValidationFailure ;
    mf:name "1val1vExprANDRef3_failvc2" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'ababab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprANDRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lababab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprANDRef3_failvc3> a sht:ValidationFailure ;
    mf:name "1val1vExprANDRef3_failvc3" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'baba' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprANDRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lbaba.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprRefAND3_pass> a sht:ValidationTest ;
    mf:name "1val1vExprRefAND3_pass" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'abab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefAND3_pass.val>
    .

<#1val1vExprRefAND3_failvc1> a sht:ValidationFailure ;
    mf:name "1val1vExprRefAND3_failvc1" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprRefAND3_failvc2> a sht:ValidationFailure ;
    mf:name "1val1vExprRefAND3_failvc2" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'ababab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lababab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprRefAND3_failvc3> a sht:ValidationFailure ;
    mf:name "1val1vExprRefAND3_failvc3" ;
    sht:trait sht:AndValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> AND ... $<vc3> } on { <s1> <p1> 'baba' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lbaba.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprAND3_pass> a sht:ValidationTest ;
    mf:name "1val1vExprAND3_pass" ;
    sht:trait sht:AndValueExpression ;
    rdfs:comment "<S> { <p1> MINLENGTH 4 AND MAXLENGTH 5 AND ~ '^(ab)+' } on { <s1> <p1> 'abab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprAND3_pass.val>
    .

<#1val1vExprAND3_failvc1> a sht:ValidationFailure ;
    mf:name "1val1vExprAND3_failvc1" ;
    sht:trait sht:AndValueExpression ;
    rdfs:comment "<S> { <p1> MINLENGTH 4 AND MAXLENGTH 5 AND ~ '^(ab)+' } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprAND3_failvc2> a sht:ValidationFailure ;
    mf:name "1val1vExprAND3_failvc2" ;
    sht:trait sht:AndValueExpression ;
    rdfs:comment "<S> { <p1> MINLENGTH 4 AND MAXLENGTH 5 AND ~ '^(ab)+' } on { <s1> <p1> 'ababab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lababab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprAND3_failvc3> a sht:ValidationFailure ;
    mf:name "1val1vExprAND3_failvc3" ;
    sht:trait sht:AndValueExpression ;
    rdfs:comment "<S> { <p1> MINLENGTH 4 AND MAXLENGTH 5 AND ~ '^(ab)+' } on { <s1> <p1> 'baba' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprAND3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lbaba.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

###   } AND valueExpr
###   OR valueExpr {

<#1dotRefOr3_fail> a sht:ValidationFailure ;
    mf:name "1dotRefOr3_fail" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> OR @<S3> OR @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <n1> <p1> <n2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefOr3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    .

<#1dotRefOr3_passShape1> a sht:ValidationTest ;
    mf:name "1dotRefOr3_passShape1" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> OR @<S3> OR @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n2> . <n2> <p2> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefOr3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ip2_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRefOr3_passShape1.val>
    .

<#1dotRefOr3_passShape2> a sht:ValidationTest ;
    mf:name "1dotRefOr3_passShape2" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> OR @<S3> OR @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n3> . <n3> <p3> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefOr3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In3.In3_Ip3_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRefOr3_passShape2.val>
    .

<#1dotRefOr3_passShape3> a sht:ValidationTest ;
    mf:name "1dotRefOr3_passShape3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> OR @<S3> OR @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <n4> . <n4> <p4> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefOr3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In4.In4_Ip4_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRefOr3_passShape3.val>
    .

<#1dotRefOr3_passShape1Shape2Shape3> a sht:ValidationTest ;
    mf:name "1dotRefOr3_passShape1Shape2Shape3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "<S1> { <p1> @<S2> OR @<S3> OR @<S4> } <S2> { <p2> . } <S3> { <p3> . } <S4> { <p4> . } on { <s1> <p1> <s2>, <s3>, <s4> . <s2> <p2> \"X\" . <s3> <p3> \"X\" . <s4> <p4> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotRefOr3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_In2.In2_Ipx_LXX3.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <1dotRefOr3_passShape1.val>
    .

<#1val1vExprORRef3_fail> a sht:ValidationFailure ;
    mf:name "1val1vExprORRef3_fail" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprORRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprORRef3_passvc1> a sht:ValidationTest ;
    mf:name "1val1vExprORRef3_passvc1" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprORRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprORRef3_passvc1.val>
    .

<#1val1vExprORRef3_passvc2> a sht:ValidationTest ;
    mf:name "1val1vExprORRef3_passvc2" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'cd' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprORRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprORRef3_passvc2.val>
    .

<#1val1vExprORRef3_passvc3> a sht:ValidationTest ;
    mf:name "1val1vExprORRef3_passvc3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'ef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprORRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprORRef3_passvc3.val>
    .

<#1val1vExprORRef3_passvc1vc2vc3> a sht:ValidationTest ;
    mf:name "1val1vExprORRef3_passvc1vc2vc3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'abcdef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprORRef3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprORRef3_passvc1vc2vc3.val>
    .

<#1val1vExprRefOR3_fail> a sht:ValidationFailure ;
    mf:name "1val1vExprRefOR3_fail" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprRefOR3_passvc1> a sht:ValidationTest ;
    mf:name "1val1vExprRefOR3_passvc1" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefOR3_passvc1.val>
    .

<#1val1vExprRefOR3_passvc2> a sht:ValidationTest ;
    mf:name "1val1vExprRefOR3_passvc2" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'cd' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefOR3_passvc2.val>
    .

<#1val1vExprRefOR3_passvc3> a sht:ValidationTest ;
    mf:name "1val1vExprRefOR3_passvc3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'ef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefOR3_passvc3.val>
    .

<#1val1vExprRefOR3_passvc1vc2vc3> a sht:ValidationTest ;
    mf:name "1val1vExprRefOR3_passvc1vc2vc3" ;
    sht:trait sht:OrValueExpression , sht:ValueReference ;
    rdfs:comment "$<vc1> = ... $<vc3> = ... <S> { <p1> $<vc1> OR ... $<vc3> } on { <s1> <p1> 'abcdef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprRefOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprRefOR3_passvc1vc2vc3.val>
    .

<#1val1vExprOR3_fail> a sht:ValidationFailure ;
    mf:name "1val1vExprOR3_fail" ;
    sht:trait sht:OrValueExpression ;
    rdfs:comment "<S> { <p1> ~'^ab' OR ~'cd' OR ~'ef$' } on { <s1> <p1> 'a' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_La.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    .

<#1val1vExprOR3_passvc1> a sht:ValidationTest ;
    mf:name "1val1vExprOR3_passvc1" ;
    sht:trait sht:OrValueExpression ;
    rdfs:comment "<S> { <p1> ~'^ab' OR ~'cd' OR ~'ef$' } on { <s1> <p1> 'ab' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lab.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprOR3_passvc1.val>
    .

<#1val1vExprOR3_passvc2> a sht:ValidationTest ;
    mf:name "1val1vExprOR3_passvc2" ;
    sht:trait sht:OrValueExpression ;
    rdfs:comment "<S> { <p1> ~'^ab' OR ~'cd' OR ~'ef$' } on { <s1> <p1> 'cd' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lcd.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprOR3_passvc2.val>
    .

<#1val1vExprOR3_passvc3> a sht:ValidationTest ;
    mf:name "1val1vExprOR3_passvc3" ;
    sht:trait sht:OrValueExpression ;
    rdfs:comment "<S> { <p1> ~'^ab' OR ~'cd' OR ~'ef$' } on { <s1> <p1> 'ef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Lef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprOR3_passvc3.val>
    .

<#1val1vExprOR3_passvc1vc2vc3> a sht:ValidationTest ;
    mf:name "1val1vExprOR3_passvc1vc2vc3" ;
    sht:trait sht:OrValueExpression ;
    rdfs:comment "<S> { <p1> ~'^ab' OR ~'cd' OR ~'ef$' } on { <s1> <p1> 'abcdef' }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1vExprOR3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Labcdef.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1vExprOR3_passvr1vr2vr3.val>
    .

###   } OR valueExpr
## } value expressions
## closed {

<#1dotClosed_pass> a sht:ValidationTest ;
    mf:name "1dotClosed_pass" ;
    sht:trait sht:Closed ;
    rdfs:comment "<S> CLOSED { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotClosed.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotClosed_fail_lower> a sht:ValidationFailure ;
    mf:name "1dotClosed_fail_lower" ;
    sht:trait sht:Closed ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotClosed.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1dotClosed_fail_higher> a sht:ValidationFailure ;
    mf:name "1dotClosed_fail_higher" ;
    sht:trait sht:Closed ;
    rdfs:comment "<S> { <p1> . } on { <s> <p1> <o1>; <p2> <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotClosed.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1;Ip2_Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

## } closed
## extra {

<#1val1IRIREFExtra1_pass-iri1> a sht:ValidationTest ;
    mf:name "1val1IRIREFExtra1_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence ;
    rdfs:seeAlso <#1val1IRIREF_pass>, <#1val1IRIREF_v2>, <#1val1IRIREF_pass> ;
    rdfs:comment "<S> EXTRA <p1> { <p1> [<o1>] } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFExtra1_Is1_Ip1_Io1.val>
    .

<#1val1IRIREFExtra1_pass-iri2> a sht:ValidationTest ;
    mf:name "1val1IRIREFExtra1_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence ;
    rdfs:comment "<S> EXTRA <p1> { <p1> [<o1>] } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFExtra1_Is1_Ip1_Io1.val>
    .

<#1val2IRIREFExtra1_fail-iri2> a sht:ValidationFailure ;
    mf:name "1val2IRIREFExtra1_fail-iri2" ;
    sht:trait sht:Extra , sht:ValueSet;
    rdfs:comment "<S> EXTRA <p1> { <p1> [<o1> <o2>] } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val2IRIREFExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1val2IRIREFPlusExtra1_pass-iri2> a sht:ValidationTest ;
    mf:name "1val2IRIREFPlusExtra1_pass-iri2" ;
    sht:trait sht:Extra , sht:ValueSet ;
    rdfs:comment "<S> EXTRA <p1> { <p1> [<o1> <o2>]+ } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val2IRIREFPlusExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val2IRIREFPlusExtra1_Is1_Ip1_Io1,Io2.val>
    .

<#1val2IRIREFExtra1_pass-iri-bnode> a sht:ValidationTest ;
    mf:name "1val2IRIREFExtra1_pass-iri-bnode" ;
    sht:trait sht:Extra , sht:ValueSet ;
    rdfs:comment "<S> EXTRA <p1> { <p1> [<o1> <o2>] } on { <s> <p1> <o1>, _:o2 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val2IRIREFExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Bo2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val2IRIREFExtra1_bnode_Is1_Ip1_Io1.val>
    .

<#1val1IRIREFExtra1p2_pass-iri1> a sht:ValidationTest ;
    mf:name "1val1IRIREFExtra1p2_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence ;
    rdfs:seeAlso <#1val1IRIREF_pass>, <#1val1IRIREF_v2>, <#1val1IRIREF_pass> ;
    rdfs:comment "<S> EXTRA <p2> { <p1> [<o1>] } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1p2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFExtra1p2_Is1_Ip1_Io1.val>
    .

<#1val1IRIREFExtra1p2_pass-iri2> a sht:ValidationFailure ;
    mf:name "1val1IRIREFExtra1p2_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence ;
    rdfs:comment "<S> EXTRA <p2> { <p1> [<o1>] } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1p2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1val1IRIREFExtra1Or_pass-iri1> a sht:ValidationTest ;
    mf:name "1val1IRIREFExtra1Or_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:seeAlso <#1val1IRIREF_pass>, <#1val1IRIREF_v2>, <#1val1IRIREF_pass> ;
    rdfs:comment "<S> EXTRA <p1> { <p0> . | <p1> [<o1>], <p2> .? } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1Or.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFExtra1Or_Is1_Ip1_Io1.val>
    .

<#1val1IRIREFExtra1Or_pass-iri2> a sht:ValidationTest ;
    mf:name "1val1IRIREFExtra1Or_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf;
    rdfs:comment "<S> EXTRA <p1> { <p0> . | <p1> [<o1>], <p2> .? } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1val1IRIREFExtra1Or.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1val1IRIREFExtra1Or_Is1_Ip1_Io1.val>
    .

<#1dotExtra1_pass-iri1> a sht:ValidationTest ;
    mf:name "1dotExtra1_pass-iri1" ;
    sht:trait sht:VapidExtra , sht:Extra ;
    rdfs:comment "<S> EXTRA <p1> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#1dotExtra1_fail-iri2> a sht:ValidationFailure ;
    mf:name "1dotExtra1_fail-iri2" ;
    sht:trait sht:VapidExtra , sht:Extra ;
    rdfs:comment "<S> EXTRA <p1> { <p1> . } on { <s> <p1> <o1>, <o2> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotExtra1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1,Io2.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#3groupdotExtra3_pass-iri1> a sht:ValidationTest ;
    mf:name "3groupdotExtra3_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:comment "<S> EXTRA <p1> <p2> <p3> { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>; <p2> <o2>; <p3> <o3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdotExtra3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

<#3groupdot3Extra_pass-iri1> a sht:ValidationTest ;
    mf:name "3groupdot3Extra_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf;
    rdfs:comment "<S> EXTRA <p1> EXTRA <p2> EXTRA <p3> { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>; <p2> <o2>; <p3> <o3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdot3Extra.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

<#3groupdotExtra3NLex_pass-iri1> a sht:ValidationTest ;
    mf:name "3groupdotExtra3NLex_pass-iri1" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:comment "PREFIX ex: <http://a.example/> <S> EXTRA ex:p1 ex:p2 ex:p3 { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>; <p2> <o2>; <p3> <o3> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdotExtra3NLex.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

<#3groupdotExtra3_pass-iri2> a sht:ValidationTest ;
    mf:name "3groupdotExtra3_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:comment "<S> EXTRA <p1> <p2> <p3> { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>, <o1a>; <p2> <o2>, <o2a>; <p3> <o3>, <o3a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdotExtra3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.Is_Ipn_IonaX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

<#3groupdot3Extra_pass-iri2> a sht:ValidationTest ;
    mf:name "3groupdot3Extra_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:comment "<S> EXTRA <p1> EXTRA <p2> EXTRA <p3> { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>, <o1a>; <p2> <o2>, <o2a>; <p3> <o3>, <o3a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdot3Extra.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.Is_Ipn_IonaX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

<#3groupdotExtra3NLex_pass-iri2> a sht:ValidationTest ;
    mf:name "3groupdotExtra3NLex_pass-iri2" ;
    sht:trait sht:Extra , sht:IriEquivalence , sht:EachOf ;
    rdfs:comment "PREFIX ex: <http://a.example/> <S> EXTRA ex:p1 ex:p2 ex:p3 { <p1> [<o1>], <p2> [<o2>], <p3> [<o3>] } on { <s> <p1> <o1>, <o1a>; <p2> <o2>, <o2a>; <p3> <o3>, <o3a> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/3groupdotExtra3NLex.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is_Ipn_IonX3.Is_Ipn_IonaX3.ttl> ;
      sht:focus <http://a.example/s>
    ] ;
    mf:result <3groupdotExtra3_Is_Ipn_IonX3.val>
    .

## } extra
## start {

<#startRefIRIREF_pass-noOthers> a sht:ValidationTest ;
    mf:name "startRefIRIREF_pass-noOthers" ;
    sht:trait sht:Start ;
    rdfs:comment "start=<S> <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startRefIRIREF.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#startRefIRIREF_pass-others_lexicallyEarlier> a sht:ValidationTest ;
    mf:name "startRefIRIREF_pass-others_lexicallyEarlier" ;
    sht:trait sht:Start ;
    rdfs:comment "start=<S> <S> { <p1> . } on { <s> <p0> <o0>; <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startRefIRIREF.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip0_Io0;Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dot_pass.val>
    .

<#startRefIRIREF_fail-missing> a sht:ValidationFailure ;
    mf:name "startRefIRIREF_fail-missing" ;
    sht:trait sht:Start ;
    rdfs:comment "start=<S> <S> { <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startRefIRIREF.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#startRefbnode_pass-noOthers> a sht:ValidationTest ;
    mf:name "startRefbnode_pass-noOthers" ;
    sht:trait sht:Start ;
    rdfs:comment "start=_:S _:S { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startRefbnode.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <bnode1dot_pass.val>
    .

<#startRefbnode_fail-missing> a sht:ValidationFailure ;
    mf:name "startRefbnode_fail-missing" ;
    sht:trait sht:Start ;
    rdfs:comment "start=_:S _S { <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startRefbnode.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#startInline_pass-noOthers> a sht:ValidationTest ;
    mf:name "startInline_pass-noOthers" ;
    sht:trait sht:Start ;
    rdfs:comment "start={ <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startInline.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startInline_pass.val>
    .

<#startEqualSpaceInline_pass-noOthers> a sht:ValidationTest ;
    mf:name "startEqualSpaceInline_pass-noOthers" ;
    sht:trait sht:Start ;
    rdfs:comment "start= { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startEqualSpaceInline.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startInline_pass.val>
    .

<#startSpaceEqualInline_pass-noOthers> a sht:ValidationTest ;
    mf:name "startSpaceEqualInline_pass-noOthers" ;
    sht:trait sht:Start ;
    rdfs:comment "start= { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startSpaceEqualInline.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startInline_pass.val>
    .

<#startInline_fail-missing> a sht:ValidationFailure ;
    mf:name "startInline_fail-missing" ;
    sht:trait sht:Start ;
    rdfs:comment "start={ <p1> . } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startInline.shex> ;
      # sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .


## } start
## include {

<#2eachInclude1_pass> a sht:ValidationTest ;
    mf:name "2eachInclude1_pass" ;
    sht:trait sht:Include , sht:EachExpression , sht:EachOf ;
    rdfs:comment "<S1> { &<S2>, <p1> . } <S2> { <p2> . } on { <n1> <p1> \"X\" ; <p2> \"Y\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/2eachInclude1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_LX.In1_Ip2_LY.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <2eachInclude1_pass.val>
    .

<#2eachInclude1-after_pass> a sht:ValidationTest ;
    mf:name "2eachInclude1-after_pass" ;
    sht:trait sht:Include , sht:EachExpression , sht:EachOf ;
    rdfs:comment "<S1> { <p1> ., &<S2> } <S2> { <p2> . } on { <n1> <p1> \"X\" ; <p2> \"Y\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/2eachInclude1-after.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_LX.In1_Ip2_LY.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <2eachInclude1-after_pass.val>
    .

<#2someInclude1_pass> a sht:ValidationTest ;
    mf:name "2someInclude1_pass" ;
    sht:trait sht:Include , sht:SomeOf ;
    rdfs:comment "<S1> { &<S2> | <p1> . } <S2> { <p2> . } on { <n1> <p1> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/2someInclude1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <2someInclude1_pass.val>
    .

<#2someInclude1-after_pass> a sht:ValidationTest ;
    mf:name "2someInclude1-after_pass" ;
    sht:trait sht:Include , sht:SomeOf ;
    rdfs:comment "<S1> { <p1> . | &<S2> } <S2> { <p2> . } on { <n1> <p1> \"X\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/2someInclude1-after.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <In1_Ip1_LX.ttl> ;
      sht:focus <http://a.example/n1>
    ] ;
    mf:result <2someInclude1_pass.val>
    .

## } include
## annotations {

<#1dotAnnotIRIREF_pass> a sht:ValidationTest ;
    mf:name "1dotAnnotIRIREF_pass" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <annot> <IRIREF> } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotAnnotIRIREF.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotAnnotIRIREF_pass.val>
    .

<#1dotAnnotIRIREF_missing> a sht:ValidationFailure ;
    mf:name "1dotAnnotIRIREF_missing" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <annot> <IRIREF> } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotAnnotIRIREF.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1dotAnnotSTRING_LITERAL1_pass> a sht:ValidationTest ;
    mf:name "1dotAnnotSTRING_LITERAL1_pass" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <annot> 'STRING_LITERAL1' } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotAnnotSTRING_LITERAL1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotAnnotSTRING_LITERAL1_pass.val>
    .

<#1dotAnnot3_pass> a sht:ValidationTest ;
    mf:name "1dotAnnot3_pass" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <a1> '1'; <a1> '2'; <a1> '3'; } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotAnnot3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotAnnot3_pass.val>
    .

<#1dotAnnot3_missing> a sht:ValidationFailure ;
    mf:name "1dotAnnot3_missing" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <a1> '1'; <a1> '2'; <a1> '3'; } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotAnnot3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1inversedotAnnot3_pass> a sht:ValidationTest ;
    mf:name "1inversedotAnnot3_pass" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <a1> '1'; <a1> '2'; <a1> '3'; } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedotAnnot3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1inversedotAnnot3_pass.val>
    .

<#1inversedotAnnot3_missing> a sht:ValidationFailure ;
    mf:name "1inversedotAnnot3_missing" ;
    sht:trait sht:Annotation ;
    rdfs:comment "<S> { <p1> .; <a1> '1'; <a1> '2'; <a1> '3'; } on { <s> <p2> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedotAnnot3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip2_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ]
    .

 # !../schemas/open3groupdotcloseAnnot3.shex

## } annotations
## semantic actions {

<#1dotCode1_pass> a sht:ValidationTest ;
    mf:name "1dotCode1_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . %<Test>{ print(o) %} } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotCode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotCode1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "http://a.example/o1"
      ]
    )
    .

<#1inversedotCode1_pass> a sht:ValidationTest ;
    mf:name "1inversedotCode1_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . %<Test>{ print(o) %} } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1inversedotCode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/o1>
    ] ;
    mf:result <1inversedotCode1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "http://a.example/o1"
      ]
    )
    .

<#1dotCode3_pass> a sht:ValidationTest ;
    mf:name "1dotCode3_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . %<Test>{ print(s) %} %<Test>{ print(p) %} %<Test>{ print(o) %} } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotCode3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotCode3_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "http://a.example/s1"
      ]
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "http://a.example/p1"
      ]
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "http://a.example/o1"
      ]
    )
    .

<#1dotCode3fail_abort> a sht:ValidationFailure ;
    mf:name "1dotCode3fail_abort" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . %<Test>{ print(s) %}%<Test>{ fail(s) %}%<Test>{ print(o) %} } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotCode3fail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

<#1dotCodeWithEscapes1_pass> a sht:ValidationTest ;
    mf:name "1dotCodeWithEscapes1_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . %<Test>{ print(o) %} } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotCodeWithEscapes1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotCodeWithEscapes1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"%{\\\\%}\""
      ]
    )
    .

<#1dotShapeCode1_pass> a sht:ValidationTest ;
    mf:name "1dotShapeCode1_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "<S> { <p1> . } %<Test>{ print(o) %} on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/1dotShapeCode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <1dotShapeCode1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"shape action\""
      ]
    )
    .

<#open3groupdotcloseCode1-p1p2p3> a sht:ValidationTest ;
    mf:name "open3groupdotcloseCode1-p1p2p3" ;
    sht:trait sht:SemanticAction , sht:EachOf ;
    rdfs:comment "<S1> { ( <p1> ., <p2> ., <p3> . ) %<Test/>{ print(\"group semAct\") %} } / { :s1 :p1 \"p1-0\"; :p2 \"p2-0\"; :p3 \"p3-0\" . }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/open3groupdotcloseCode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2p3.ttl> ;
      sht:focus <x>
    ] ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"group semAct\""
      ]
    ) ;
    mf:result <open3groupdotcloseCode1-p1p2p3.val>
    .

<#startCode1_pass> a sht:ValidationTest ;
    mf:name "startCode1_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{print('startAct')%} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode1.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startCode1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct\""
      ]
    )
    .

<#startCode1fail_abort> a sht:ValidationFailure ;
    mf:name "startCode1fail_abort" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{ fail('startAct') %} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode1fail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct\""
      ]
    )
    .

<#startCode1startRef_pass> a sht:ValidationTest ;
    mf:name "startCode1startRef_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{print('startAct')%} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode1startRef.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startCode1_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct\""
      ]
    )
    .

<#startCode1startReffail_abort> a sht:ValidationFailure ;
    mf:name "startCode1startReffail_abort" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{ fail('startAct') %} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode1startReffail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct\""
      ]
    )
    .

<#startCode3_pass> a sht:ValidationTest ;
    mf:name "startCode3_pass" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{print('startAct 1')%} %<Test>{print('startAct 2')%} %<Test>{print('startAct 3')%} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode3.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ] ;
    mf:result <startCode3_pass.val> ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct 1\""
      ]
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct 2\""
      ]
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"startAct 3\""
      ]
    )
    .

<#startCode3fail_abort> a sht:ValidationFailure ;
    mf:name "startCode3fail_abort" ;
    sht:trait sht:SemanticAction ;
    rdfs:comment "%<Test>{print('startAct 1')%} %<Test>{ fail('startAct 2') %} %<Test>{print('startAct 3')%} <S> { <p1> . } on { <s> <p1> <o1> }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/startCode3fail.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <Is1_Ip1_Io1.ttl> ;
      sht:focus <http://a.example/s1>
    ]
    .

## } semantic actions
## annotations + semantic actions {
<#open3groupdotclosecard23Annot3Code2-p1p2p3X3> a sht:ValidationTest ;
    mf:name "open3groupdotclosecard23Annot3Code2-p1p2p3X3" ;
    sht:trait sht:Annotation , sht:SemanticAction , sht:EachOf ;
    rdfs:comment "<S1> { ( <p1> ., <p2> ., <p3> . ){2,3} ; <annot1> \"1\" ; <annot2> \"2\" ; <annot3> \"3\" %<Test/>{ p(\"...1\") %} %<Test/>{ p(\"...2\") %} } / { <s> <p1> \"p1-n\"; <p2> \"p2-n\"; <p3> \"p3-n\" }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../schemas/open3groupdotclosecard23Annot3Code2.shex> ;
      sht:shape <http://a.example/S1> ;
      sht:data <p1p2p3X3.ttl> ;
      sht:focus <x>
    ] ;
    mf:extensionResults (
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"group semAct 1\""
      ]
      [
        mf:extension <http://shex.io/extensions/Test/> ;
        mf:prints "\"group semAct 2\""
      ]
    ) ;
    mf:result <open3groupdotclosecard23Annot3Code2-p1p2p3X3.val>
    .

## } annotations + semantic actions
## manual schemas {

<#iovka> a sht:ValidationTest ;
    mf:name "iovka" ;
    sht:trait sht:EachOf ;
    rdfs:comment "@@ iovka" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/iovka.shex> ;
      sht:shape <S> ;
      sht:data <iovka.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <iovka.val>
    .

<#greedy> a sht:ValidationTest ;
    mf:name "greedy" ;
    sht:trait sht:EachOf ;
    rdfs:comment "<S> { :a .*, (:a .+ | :a .), :a . } / { <x> :a 1, 3 }" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/greedy.shex> ;
      sht:shape <S> ;
      sht:data <greedy.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <greedy.val>
    .

<#skipped> a sht:ValidationTest ;
    mf:name "skipped" ;
    sht:trait sht:EachOf ;
    rdfs:comment "@@ skipped" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/skipped.shex> ;
      sht:shape <S> ;
      sht:data <skipped.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <skipped.val>
    .

<#repeated-group> a sht:ValidationTest ;
    mf:name "repeated-group" ;
    sht:trait sht:EachOf ;
    rdfs:comment "@@ repeated-group" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/repeated-group.shex> ;
      sht:shape <S> ;
      sht:data <repeated-group.ttl> ;
      sht:focus <x>
    ] ;
    mf:result <repeated-group.val>
    .

<#simple-group> a sht:ValidationTest ;
    mf:name "simple-group" ;
    sht:trait sht:EachOf ;
    rdfs:comment "@@ simple-group" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/simple-group.shex> ;
      sht:shape <S> ;
      sht:data <simple-group.ttl> ;
      sht:focus <s0>
    ] ;
    mf:result <simple-group.val>
    .

<#PstarT> a sht:ValidationTest ;
    mf:name "PstarT" ;
    sht:trait sht:EachOf ;
    rdfs:comment "<S1> {:a $<P>*, :a $<T>} / { <n> :a <pt1>,  <pt2>,  <p>,  <t>}" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/apt.shex> ;
      sht:shape <S1> ;
      sht:data <apt.ttl> ;
      sht:focus <n>
    ] ;
    mf:result <PstarT.val>
    .

<#PTstar> a sht:ValidationTest ;
    mf:name "PTstar" ;
    sht:trait sht:EachOf ;
    rdfs:comment "<S2> {:a $<P>, :a $<T>*} / { <n> :a <pt1>,  <pt2>,  <p>,  <t>}" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/apt.shex> ;
      sht:shape <S2> ;
      sht:data <apt.ttl> ;
      sht:focus <n>
    ] ;
    mf:result <PTstar.val>
    .

<#PstarTstar> a sht:ValidationTest ;
    mf:name "PstarTstar" ;
    sht:trait sht:EachOf ;
    rdfs:comment "<S3> {:a $<P>*, :a $<T>*} / { <n> :a <pt1>,  <pt2>,  <p>,  <t>}" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/apt.shex> ;
      sht:shape <S3> ;
      sht:data <apt.ttl> ;
      sht:focus <n>
    ] ;
    mf:result <PstarTstar.val>
    .

<#P2T2> a sht:ValidationTest ;
    mf:name "P2T2" ;
    sht:trait sht:EachOf ;
    rdfs:comment "<S4> {:a $<P>{2}, :a $<T>{2}} / { <n> :a <pt1>,  <pt2>,  <p>,  <t>}" ;
    mf:status mf:proposed ;
    mf:action [
      sht:schema <../validation/apt.shex> ;
      sht:shape <S4> ;
      sht:data <apt.ttl> ;
      sht:focus <n>
    ] ;
    mf:result <P2T2.val>
    .

## } manual schemas
# deferred {
## inherit {

 # !../schemas/0Inherit1.shex
 # !../schemas/1dotInherit1.shex
 # !../schemas/1dotInherit3.shex
 # !../schemas/1dot3Inherit.shex [1dotInherit3.shex]
 # !../schemas/1dot3InheritLN.shex

### virtual {
 # !../schemas/1dotVirtualShapeCode1.shex
 # !../schemas/1dotVirtual.shex
### } virtual
## } inherit
## unlabeled semantic actions {
 # !../schemas/1dotUnlabeledCode1.shex
## } unlabeled semantic actions
## everything {
 # !../schemas/_all.shex
 # !../schemas/kitchenSink.shex
## } everything
# } deferred
