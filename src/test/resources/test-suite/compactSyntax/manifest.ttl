@prefix rdf:    <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#> .
@prefix mf:     <http://www.w3.org/2001/sw/DataAccess/tests/test-manifest#> .
@prefix qt:     <http://www.w3.org/2001/sw/DataAccess/tests/test-query#> .
@prefix sh:     <http://www.w3.org/ns/shacl#> .
@prefix sht:    <http://www.w3.org/ns/shacl/test-suite#> .
@prefix dawgt:  <http://www.w3.org/2001/sw/DataAccess/tests/test-dawg#> .
@prefix dc:     <http://purl.org/dc/elements/1.1/> .
@prefix xsd:    <http://www.w3.org/2001/XMLSchema#> .
@prefix ex:     <http://example.org/> .
@prefix td:  	<http://www.w3.org/2006/03/test-description#> .
@prefix : 		<http://www.w3.org/2001/sw/DataAccess/tests/data-r2/algebra/manifest#> .
@base <http://www.w3.org/ns/shacl#> .
 
<> a mf:Manifest ;
   rdfs:label "Manifest file - Compact syntax" ;
   rdfs:comment "Manifest file Compact syntax tests" ;
   dc:creator "Jose Labra";
   dc:date "2015-06-02"^^<xsd:date> ;
   mf:entries (
    <singleIRI_IRI_pass>
    <singleIRI_Bnode_fail>
    <singleBNode_IRI_fail>
    <singleBNode_BNode_pass>
    :ab-ab
    :ab-0
    :ab-a
    :ab-b
    :ab-_B
    :a_OPTb_OPT-a
    :a_OPTb_OPT-b
    :a_OPTb_OPT-a_B
    :a_OPTb-0
    :a_OPTb-_B
    :ab_OPT-0
    :ab-_A_B
    :ab-_Ab
    :ab-_A
   ) .

<singleIRI_IRI_pass> a sht:MatchNodeShape ;
   mf:name "Compact syntax: single IRI - IRI -> (pass)" ;
   mf:action [
 	 sht:data <singleIRI.ttl> ; 
 	 sht:data-format sht:TURTLE ;
     sht:schema <tripleConstraintIRI.shc> ; 
     sht:schema-format sht:SHACLC   ; 
 	 sht:node ex:x ;
 	 sht:shape ex:shape 
	 ] ;
   mf:result true ; 
   mf:status sht:proposed
   .

<singleIRI_Bnode_fail> a sht:MatchNodeShape ;
   mf:name "Compact syntax: single IRI - BNode (fail)" ;
   mf:action [
 	 sht:data <singleIRI.ttl> ; 
 	 sht:data-format sht:TURTLE ;
     sht:schema <tripleConstraintBNode.shc> ; 
     sht:schema-format sht:SHACLC   ; 
 	 sht:node ex:x ;
 	 sht:shape ex:shape 
	 ] ;
   mf:result false ; 
   mf:status sht:proposed
   .

<singleBNode_IRI_fail> a sht:MatchNodeShape ;
   mf:name "Compact syntax: single BNode - IRI -> (fail)" ;
   mf:action [
 	 sht:data <singleBNode.ttl> ; 
 	 sht:data-format sht:TURTLE ;
     sht:schema <tripleConstraintIRI.shc> ; 
     sht:schema-format sht:SHACLC   ; 
 	 sht:node ex:x ;
 	 sht:shape ex:shape 
	 ] ;
   mf:result false ;
   mf:status sht:proposed
   .

<singleBNode_BNode_pass> a sht:MatchNodeShape ;
   mf:name "Compact syntax: single BNode - BNode -> (pass)" ;
   mf:action [
 	 sht:data <singleBNode.ttl> ; 
 	 sht:data-format sht:TURTLE ;
     sht:schema <tripleConstraintBNode.shc> ; 
     sht:schema-format sht:SHACLC   ; 
 	 sht:node ex:x ;
 	 sht:shape ex:shape 
	 ] ;
   mf:result true ;
   mf:status sht:proposed
   .

:ab-ab a sht:MatchNodeShape ;
    mf:name "ab ab" ;    
    mf:action [
        sht:schema <ab.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <ab.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result true ;
    mf:status sht:proposed .

:ab-0 a sht:MatchNodeShape ;
    mf:name "ab 0" ;    
    mf:action [
        sht:schema <ab.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <0.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab-a a sht:MatchNodeShape ;
    mf:name "ab a" ;    
    mf:action [
        sht:schema <ab.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <a.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab-b a sht:MatchNodeShape ;
    mf:name "ab b" ;    
    mf:action [
        sht:schema <ab.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <b.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .
    
:ab-_B a sht:MatchNodeShape ;
    mf:name "ab _B" ;    mf:action [
        sht:schema <ab.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <_B.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:a_OPTb_OPT-a a sht:MatchNodeShape ;
    mf:name "a_OPTb_OPT a" ;    mf:action [
        sht:schema <a_OPTb_OPT.shc> ;
        sht:schema-format sht:SHACLC ;
        sht:data <a.ttl> ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result true ;
    mf:status sht:proposed .

:a_OPTb_OPT-b a sht:MatchNodeShape ;
    mf:name "a_OPTb_OPT b" ;    
    mf:action [
        sht:schema <a_OPTb_OPT.shc> ;
        sht:data <b.ttl> ;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result true ;
    mf:status sht:proposed .
    
    
:a_OPTb_OPT-a_B a sht:MatchNodeShape ;
    mf:name "a_OPTb_OPT a_B" ;    
    mf:action [
        sht:schema <a_OPTb_OPT.shc> ;
        sht:data <a_B.ttl> ;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:a_OPTb-0 a sht:MatchNodeShape ;
    mf:name "a_OPTb 0" ;    mf:action [
        sht:schema <a_OPTb.shc> ;
        sht:data <0.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:a_OPTb-_B a sht:MatchNodeShape ;
    mf:name "a_OPTb _B" ;    mf:action [
        sht:schema <a_OPTb.shc> ;
        sht:data <_B.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab_OPT-0 a sht:MatchNodeShape ;
    mf:name "ab_OPT 0" ;    mf:action [
        sht:schema <ab_OPT.shc> ;
        sht:data <0.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab-_A_B a sht:MatchNodeShape ;
    mf:name "ab _A_B" ;    mf:action [
        sht:schema <ab.shc> ;
        sht:data <_A_B.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab-_Ab a sht:MatchNodeShape ;
    mf:name "ab _Ab" ;    mf:action [
        sht:schema <ab.shc> ;
        sht:data <_Ab.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .

:ab-_A a sht:MatchNodeShape ;
    mf:name "ab _A" ;    mf:action [
        sht:schema <ab.shc> ;
        sht:data <_A.ttl>;
        sht:schema-format sht:SHACLC ;
        sht:data-format sht:TURTLE ; 
        sht:node ex:x ;
        sht:shape ex:shape
    ] ;
    mf:result false ;
    mf:status sht:proposed .
    