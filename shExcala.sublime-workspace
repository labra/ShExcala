{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "package es.weso.monads\n\nimport util.{ Failure => TryFailure }\nimport util.Success\nimport util.Try\nimport es.weso.utils.SetUtils\nimport io.StdIn._ \nimport jline.console._\n\n\n/**\n * Result class represents the result of a validation process\n * The result can be: \n * - `Passed` with a list of values\n * - `Failure` with a string message \n */\nsealed abstract class Result[+A] {\n  \n  def toSingle: Try[A] = {\n    this match {\n      case Passed(rs) => \n        if (rs.size == 1) Success(rs.head)\n        else TryFailure(ResultException(\"More than one result\"))\n      case Failure(msg) => TryFailure(ResultException(msg))\n    }\n  }\n\n  def run(): Try[Stream[A]] = {\n    this match {\n      case Passed(rs) => Success(rs)\n      case Failure(msg) => TryFailure(ResultException(msg))\n    }\n  }\n\n  def isFailure: Boolean\n  def isValid: Boolean = !isFailure\n  def failMsg: String\n\n  def toList(): List[A] = {\n    this match {\n      case Passed(rs) => rs.toList\n      case Failure(msg) => List()\n    }\n  }\n\n  def toList(n: Int): List[A] = {\n    this match {\n      case Passed(rs) => rs.take(n).toList\n      case Failure(msg) => List()\n    }\n  }\n\n  def noResult[B]: Result[B] = Passed(Stream())\n\n  def appendResult[B](r: Result[B], x: Result[B]): Result[B] = {\n    (x, r) match {\n      case (Passed(rs1), Passed(rs2)) => Passed(rs1 ++ rs2)\n      case (Passed(rs1), Failure(_)) => Passed(rs1)\n      case (Failure(_), Passed(rs2)) => Passed(rs2)\n      case (Failure(msg1), Failure(msg2)) => Failure(msg1 + \"\\n\" + msg2)\n    }\n  }\n\n  def concatResults[B](rs: Stream[Result[B]]): Result[B] = {\n    rs.foldLeft(noResult: Result[B])(appendResult)\n  }\n\n  // TODO: I added this declaration to avoid warning...\n  // check if there is a better way to define withFilter\n  //  def withFilter = filter _\n\n  def withFilter(p: A => Boolean): Result[A] = {\n    this match {\n      case Passed(rs) => Passed(rs.filter(p))\n      case Failure(msg) => Failure(msg)\n    }\n  }\n\n  def flatMap[B](f: A => Result[B]): Result[B] = {\n    this match {\n      case Passed(rs) => concatResults(rs.map(f))\n      case Failure(msg) => Failure(msg)\n    }\n  }\n\n  def map[B](f: A => B): Result[B] = {\n    this match {\n      case Passed(rs) => Passed(rs.map(f))\n      case Failure(msg) => Failure(msg)\n    }\n  }\n\n  def orelse[B >: A](other: => Result[B]): Result[B] = {\n    this match {\n      case Passed(rs1) => other match {\n        case Passed(rs2) => Passed(rs1 ++ rs2)\n        case Failure(_) => Passed(rs1)\n      }\n      case Failure(msg) => other\n    }\n  }\n\n  def xor[B >: A](other: => Result[B]): Result[B] = {\n    if (this.isFailure) other\n    else \n      if (other.isFailure) this\n      else \n        Failure(\"XOr: both branches passed\")\n  }\n  \n  def not: Result[Boolean] = {\n    this match {\n      case Passed(_) => Passed(Stream(false))\n      case Failure(_) => Passed(Stream(true))\n    }\n  }\n  \n}\n\ncase class Passed[+A](passed: Stream[A]) extends Result[A] {\n  override def isFailure = passed.isEmpty\n\n  override def failMsg = \"\"\n}\n\ncase class Failure(msg: String) extends Result[Nothing] {\n  def isFailure = true\n\n  override def failMsg = msg\n}\n\ncase class ResultException(msg: String) extends RuntimeException(msg)\n\nobject Result {\n  \n  var interactive = true\n  var traceOn = false\n  val console = new ConsoleReader()\n\n  def unit[A](x: A): Result[A] = Passed(Stream(x))\n\n  def failure(msg: String): Result[Nothing] = Failure(msg)\n\n  def merge[B](comp1: Result[B], comp2: Result[B], combine: (B, B) => B): Result[B] = {\n    (comp1, comp2) match {\n      case (Passed(rs1), Passed(rs2)) => {\n        if (rs1.isEmpty) {\n          Passed(rs2)\n        } else if (rs2.isEmpty) Passed(rs1)\n        else {\n          Passed(rs1.map(x => rs2.map(y => combine(x, y))).flatten)\n        }\n      }\n      case (Passed(rs1), Failure(_)) => Passed(rs1)\n      case (Failure(_), Passed(rs2)) => Passed(rs2)\n      case (Failure(msg1), Failure(msg2)) => Failure(msg1 + \"\\n\" + msg2)\n    }\n  }\n\n  def combineAll[A, B](\n    ls: List[A],\n    eval: A => Result[B],\n    combine: (B, B) => B): Result[B] = {\n    def e: Result[B] = Passed(Stream())\n    def step(x: A, r: Result[B]): Result[B] = {\n      merge(eval(x), r, combine)\n    }\n    ls.foldRight(e)(step)\n  }\n\n  def passSome[A, B](ls: List[A],\n    eval: A => Result[B]): Result[B] = {\n    def e: Result[B] = Passed(Stream())\n    def step(x: A, r: Result[B]): Result[B] = eval(x) orelse r\n    ls.foldRight(e)(step)\n  }\n\n  def passAll[A, B](\n    ls: List[A],\n    current: B,\n    eval: (A, B) => Result[B]): Result[B] = {\n    ls match {\n      case Nil => Passed(Stream(current))\n      case x :: xs => eval(x, current).flatMap(next => passAll(xs, next, eval))\n    }\n  }\n\n  def liftOption[A](opt: Option[A]): Result[A] = {\n    opt match {\n      case None => Failure(\"Option with value None\")\n      case Some(v) => Passed(Stream(v))\n    }\n  }\n\n  def liftTry[A](t: Try[A]): Result[A] = {\n    t match {\n      case TryFailure(e) => Failure(e.getMessage())\n      case Success(v) => Passed(Stream(v))\n    }\n  }\n  \n  def setTrace(toggle: Boolean): Result[Boolean] = {\n    traceOn = toggle\n    unit(true)\n  } \n  \n  def trace(msg:String): Result[Boolean] = {\n    if (traceOn) {\n      println(\"\\nTrace: \" + msg)\n      if (interactive) {\n        println(\"\\nAction? (n = next, r = resume):\")\n        val next = console.readCharacter()\n        next match {\n        case 'n' => unit(true) \n        case 'r' => {\n          interactive = false\n          unit(true)\n        }\n        case _ => trace(msg)\n      } \n    }\n    else\n      unit(true)\n    } else\n      unit(false)\n  }\n  \n  def not[A](result: Result[A]): Result[Boolean] = {\n    result.not\n  }\n  \n  def xor[A](result1: Result[A], result2: Result[A]): Result[A] = {\n    result1.xor(result2)\n  }\n  \n  def anyOf[A](set:Set[A]):Result[(A,Set[A])] = {\n    Passed(set.map(x => (x, set - x)).toStream)\n  }\n\n  def parts[A](set: Set[A]): Result[(Set[A], Set[A])] = {\n    Passed(SetUtils.pSet(set))\n  }\n  \n  def decompose[A](set:Set[A],n:Int): Result[List[Set[A]]] = {\n    Passed(SetUtils.decompose(set,n))\n  }\n\n}",
			"file": "src/main/scala/es/weso/monads/Result.scala",
			"file_size": 6274,
			"file_write_time": 130789123879015390,
			"settings":
			{
				"buffer_size": 6027,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main/scala/es/weso/shacl/Context.scala",
			"settings":
			{
				"buffer_size": 2313,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main/scala/es/weso/shacl/ShaclValidator.scala",
			"settings":
			{
				"buffer_size": 18298,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/main/scala/es/weso/shacl/ShaclMatcher.scala",
			"settings":
			{
				"buffer_size": 1178,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/test/scala/es/weso/monads/ScalacticSpec.scala",
			"settings":
			{
				"buffer_size": 3237,
				"line_ending": "Windows"
			}
		},
		{
			"file": "target/External Libraries/scala-library-2.11.6/scala/collection/immutable/Stream.scala",
			"settings":
			{
				"buffer_size": 47054,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/test/scala/es/weso/shacl/SingleSpec.scala",
			"settings":
			{
				"buffer_size": 2782,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/test/scala/es/weso/shacl/MatchNodeLabelSpec.scala",
			"settings":
			{
				"buffer_size": 5200,
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "Package Control: ",
		"selected_items":
		[
			[
				"Package Control: ",
				"Package Control: Add Repository"
			]
		],
		"width": 400.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'eb2297e1a458f27d836c04bb0cbaf282' + 'd0e7a3098092775ccb37ca9d6b2e4b7d'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/src/shapes/ShExcala",
		"/C/src/shapes/ShExcala/project",
		"/C/src/shapes/ShExcala/src",
		"/C/src/shapes/ShExcala/src/main",
		"/C/src/shapes/ShExcala/src/main/scala",
		"/C/src/shapes/ShExcala/src/main/scala/es",
		"/C/src/shapes/ShExcala/src/main/scala/es/weso",
		"/C/src/shapes/ShExcala/src/main/scala/es/weso/monads",
		"/C/src/shapes/ShExcala/src/main/scala/es/weso/shacl",
		"/C/src/shapes/ShExcala/src/test",
		"/C/src/shapes/ShExcala/src/test/scala",
		"/C/src/shapes/ShExcala/src/test/scala/es",
		"/C/src/shapes/ShExcala/src/test/scala/es/weso",
		"/C/src/shapes/ShExcala/src/test/scala/es/weso/monads",
		"/C/src/shapes/ShExcala/src/test/scala/es/weso/shacl",
		"/C/src/shapes/ShExcala/src/test/scala/es/weso/shacl/converter",
		"/C/src/shapes/ShExcala/target/External Libraries",
		"/C/src/shapes/ShExcala/target/External Libraries/scala-library-2.11.6",
		"/C/src/shapes/ShExcala/target/External Libraries/scala-library-2.11.6/scala",
		"/C/src/shapes/ShExcala/target/External Libraries/scala-library-2.11.6/scala/collection",
		"/C/src/shapes/ShExcala/target/External Libraries/scala-library-2.11.6/scala/collection/immutable"
	],
	"file_history":
	[
		"/C/src/shapes/ShExcala/src/main/scala/es/weso/utils/Boolean.scala",
		"/C/src/shapes/ShExcala/README.md",
		"/C/src/shapes/ShExcala/build.sbt",
		"/C/src/shapes/ShExcala/src/test/scala/es/weso/shacl/MatchNodeLabelSpec.scala",
		"/C/Users/Labra/AppData/Roaming/Sublime Text 3/Packages/User/Python.sublime-settings"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 4,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main/scala/es/weso/monads/Result.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6027,
						"regions":
						{
						},
						"selection":
						[
							[
								376,
								376
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/main/scala/es/weso/shacl/Context.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2313,
						"regions":
						{
						},
						"selection":
						[
							[
								1745,
								1745
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 61.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/main/scala/es/weso/shacl/ShaclValidator.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18298,
						"regions":
						{
						},
						"selection":
						[
							[
								9077,
								9077
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4507.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/main/scala/es/weso/shacl/ShaclMatcher.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1178,
						"regions":
						{
						},
						"selection":
						[
							[
								1026,
								1026
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": -0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "src/test/scala/es/weso/monads/ScalacticSpec.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3237,
						"regions":
						{
						},
						"selection":
						[
							[
								1047,
								1047
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 150.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "target/External Libraries/scala-library-2.11.6/scala/collection/immutable/Stream.scala",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 47054,
						"regions":
						{
						},
						"selection":
						[
							[
								22451,
								22451
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9452.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/test/scala/es/weso/shacl/SingleSpec.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2782,
						"regions":
						{
						},
						"selection":
						[
							[
								1562,
								1562
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 165.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/test/scala/es/weso/shacl/MatchNodeLabelSpec.scala",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5200,
						"regions":
						{
						},
						"selection":
						[
							[
								4905,
								4905
							]
						],
						"settings":
						{
							"syntax": "Packages/Scala/Scala.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1440.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "shExcala.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 286.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
